/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Engine")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class Engine 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public Engine(){
		// No action
	}

	@JsonProperty("displacement")
	@GraphQLNonScalar(fieldName = "displacement", graphQLTypeSimpleName = "DisplacementTechnicalDataItem", javaClass = DisplacementTechnicalDataItem.class)
	DisplacementTechnicalDataItem displacement;


	@JsonProperty("engineBore")
	@GraphQLNonScalar(fieldName = "engineBore", graphQLTypeSimpleName = "EngineDetailLengthTechnicalDataItem", javaClass = EngineDetailLengthTechnicalDataItem.class)
	EngineDetailLengthTechnicalDataItem engineBore;


	@JsonProperty("engineDesign")
	@GraphQLNonScalar(fieldName = "engineDesign", graphQLTypeSimpleName = "TranslatedEnumValueTechnicalDataItem", javaClass = TranslatedEnumValueTechnicalDataItem.class)
	TranslatedEnumValueTechnicalDataItem engineDesign;


	@JsonProperty("engineLayout")
	@GraphQLNonScalar(fieldName = "engineLayout", graphQLTypeSimpleName = "TranslatedEnumValueTechnicalDataItem", javaClass = TranslatedEnumValueTechnicalDataItem.class)
	TranslatedEnumValueTechnicalDataItem engineLayout;


	@JsonProperty("engineStroke")
	@GraphQLNonScalar(fieldName = "engineStroke", graphQLTypeSimpleName = "EngineDetailLengthTechnicalDataItem", javaClass = EngineDetailLengthTechnicalDataItem.class)
	EngineDetailLengthTechnicalDataItem engineStroke;


	@JsonProperty("fuelType")
	@GraphQLNonScalar(fieldName = "fuelType", graphQLTypeSimpleName = "TranslatedEnumValueTechnicalDataItem", javaClass = TranslatedEnumValueTechnicalDataItem.class)
	TranslatedEnumValueTechnicalDataItem fuelType;


	@JsonProperty("maxPowerAtRpm")
	@GraphQLNonScalar(fieldName = "maxPowerAtRpm", graphQLTypeSimpleName = "MaxPowerAtRpm", javaClass = MaxPowerAtRpm.class)
	MaxPowerAtRpm maxPowerAtRpm;


	@JsonProperty("maxPowerPerLiter")
	@GraphQLNonScalar(fieldName = "maxPowerPerLiter", graphQLTypeSimpleName = "MaxPowerPerLiter", javaClass = MaxPowerPerLiter.class)
	MaxPowerPerLiter maxPowerPerLiter;


	@JsonProperty("maxRpm")
	@GraphQLNonScalar(fieldName = "maxRpm", graphQLTypeSimpleName = "RpmTechnicalDataItem", javaClass = RpmTechnicalDataItem.class)
	RpmTechnicalDataItem maxRpm;


	@JsonProperty("maxTorque")
	@GraphQLNonScalar(fieldName = "maxTorque", graphQLTypeSimpleName = "MaxTorque", javaClass = MaxTorque.class)
	MaxTorque maxTorque;


	@JsonProperty("maxTorqueAtRpm")
	@GraphQLNonScalar(fieldName = "maxTorqueAtRpm", graphQLTypeSimpleName = "MaxTorqueAtRpm", javaClass = MaxTorqueAtRpm.class)
	MaxTorqueAtRpm maxTorqueAtRpm;


	@JsonProperty("numberOfCylinders")
	@GraphQLNonScalar(fieldName = "numberOfCylinders", graphQLTypeSimpleName = "IntTechnicalDataItem", javaClass = IntTechnicalDataItem.class)
	IntTechnicalDataItem numberOfCylinders;


	@JsonProperty("power")
	@GraphQLNonScalar(fieldName = "power", graphQLTypeSimpleName = "Power", javaClass = Power.class)
	Power power;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setDisplacement(DisplacementTechnicalDataItem displacement) {
		this.displacement = displacement;
	}

	public DisplacementTechnicalDataItem getDisplacement() {
		return displacement;
	}
		

	public void setEngineBore(EngineDetailLengthTechnicalDataItem engineBore) {
		this.engineBore = engineBore;
	}

	public EngineDetailLengthTechnicalDataItem getEngineBore() {
		return engineBore;
	}
		

	public void setEngineDesign(TranslatedEnumValueTechnicalDataItem engineDesign) {
		this.engineDesign = engineDesign;
	}

	public TranslatedEnumValueTechnicalDataItem getEngineDesign() {
		return engineDesign;
	}
		

	public void setEngineLayout(TranslatedEnumValueTechnicalDataItem engineLayout) {
		this.engineLayout = engineLayout;
	}

	public TranslatedEnumValueTechnicalDataItem getEngineLayout() {
		return engineLayout;
	}
		

	public void setEngineStroke(EngineDetailLengthTechnicalDataItem engineStroke) {
		this.engineStroke = engineStroke;
	}

	public EngineDetailLengthTechnicalDataItem getEngineStroke() {
		return engineStroke;
	}
		

	public void setFuelType(TranslatedEnumValueTechnicalDataItem fuelType) {
		this.fuelType = fuelType;
	}

	public TranslatedEnumValueTechnicalDataItem getFuelType() {
		return fuelType;
	}
		

	public void setMaxPowerAtRpm(MaxPowerAtRpm maxPowerAtRpm) {
		this.maxPowerAtRpm = maxPowerAtRpm;
	}

	public MaxPowerAtRpm getMaxPowerAtRpm() {
		return maxPowerAtRpm;
	}
		

	public void setMaxPowerPerLiter(MaxPowerPerLiter maxPowerPerLiter) {
		this.maxPowerPerLiter = maxPowerPerLiter;
	}

	public MaxPowerPerLiter getMaxPowerPerLiter() {
		return maxPowerPerLiter;
	}
		

	public void setMaxRpm(RpmTechnicalDataItem maxRpm) {
		this.maxRpm = maxRpm;
	}

	public RpmTechnicalDataItem getMaxRpm() {
		return maxRpm;
	}
		

	public void setMaxTorque(MaxTorque maxTorque) {
		this.maxTorque = maxTorque;
	}

	public MaxTorque getMaxTorque() {
		return maxTorque;
	}
		

	public void setMaxTorqueAtRpm(MaxTorqueAtRpm maxTorqueAtRpm) {
		this.maxTorqueAtRpm = maxTorqueAtRpm;
	}

	public MaxTorqueAtRpm getMaxTorqueAtRpm() {
		return maxTorqueAtRpm;
	}
		

	public void setNumberOfCylinders(IntTechnicalDataItem numberOfCylinders) {
		this.numberOfCylinders = numberOfCylinders;
	}

	public IntTechnicalDataItem getNumberOfCylinders() {
		return numberOfCylinders;
	}
		

	public void setPower(Power power) {
		this.power = power;
	}

	public Power getPower() {
		return power;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "Engine {"
				+ "displacement: " + displacement
				+ ", "
				+ "engineBore: " + engineBore
				+ ", "
				+ "engineDesign: " + engineDesign
				+ ", "
				+ "engineLayout: " + engineLayout
				+ ", "
				+ "engineStroke: " + engineStroke
				+ ", "
				+ "fuelType: " + fuelType
				+ ", "
				+ "maxPowerAtRpm: " + maxPowerAtRpm
				+ ", "
				+ "maxPowerPerLiter: " + maxPowerPerLiter
				+ ", "
				+ "maxRpm: " + maxRpm
				+ ", "
				+ "maxTorque: " + maxTorque
				+ ", "
				+ "maxTorqueAtRpm: " + maxTorqueAtRpm
				+ ", "
				+ "numberOfCylinders: " + numberOfCylinders
				+ ", "
				+ "power: " + power
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private DisplacementTechnicalDataItem displacement;
		private EngineDetailLengthTechnicalDataItem engineBore;
		private TranslatedEnumValueTechnicalDataItem engineDesign;
		private TranslatedEnumValueTechnicalDataItem engineLayout;
		private EngineDetailLengthTechnicalDataItem engineStroke;
		private TranslatedEnumValueTechnicalDataItem fuelType;
		private MaxPowerAtRpm maxPowerAtRpm;
		private MaxPowerPerLiter maxPowerPerLiter;
		private RpmTechnicalDataItem maxRpm;
		private MaxTorque maxTorque;
		private MaxTorqueAtRpm maxTorqueAtRpm;
		private IntTechnicalDataItem numberOfCylinders;
		private Power power;

		public Builder withDisplacement(DisplacementTechnicalDataItem displacement) {
			this.displacement = displacement;
			return this;
		}
		public Builder withEngineBore(EngineDetailLengthTechnicalDataItem engineBore) {
			this.engineBore = engineBore;
			return this;
		}
		public Builder withEngineDesign(TranslatedEnumValueTechnicalDataItem engineDesign) {
			this.engineDesign = engineDesign;
			return this;
		}
		public Builder withEngineLayout(TranslatedEnumValueTechnicalDataItem engineLayout) {
			this.engineLayout = engineLayout;
			return this;
		}
		public Builder withEngineStroke(EngineDetailLengthTechnicalDataItem engineStroke) {
			this.engineStroke = engineStroke;
			return this;
		}
		public Builder withFuelType(TranslatedEnumValueTechnicalDataItem fuelType) {
			this.fuelType = fuelType;
			return this;
		}
		public Builder withMaxPowerAtRpm(MaxPowerAtRpm maxPowerAtRpm) {
			this.maxPowerAtRpm = maxPowerAtRpm;
			return this;
		}
		public Builder withMaxPowerPerLiter(MaxPowerPerLiter maxPowerPerLiter) {
			this.maxPowerPerLiter = maxPowerPerLiter;
			return this;
		}
		public Builder withMaxRpm(RpmTechnicalDataItem maxRpm) {
			this.maxRpm = maxRpm;
			return this;
		}
		public Builder withMaxTorque(MaxTorque maxTorque) {
			this.maxTorque = maxTorque;
			return this;
		}
		public Builder withMaxTorqueAtRpm(MaxTorqueAtRpm maxTorqueAtRpm) {
			this.maxTorqueAtRpm = maxTorqueAtRpm;
			return this;
		}
		public Builder withNumberOfCylinders(IntTechnicalDataItem numberOfCylinders) {
			this.numberOfCylinders = numberOfCylinders;
			return this;
		}
		public Builder withPower(Power power) {
			this.power = power;
			return this;
		}

		public Engine build() {
			Engine _object = new Engine();
			_object.setDisplacement(displacement);
			_object.setEngineBore(engineBore);
			_object.setEngineDesign(engineDesign);
			_object.setEngineLayout(engineLayout);
			_object.setEngineStroke(engineStroke);
			_object.setFuelType(fuelType);
			_object.setMaxPowerAtRpm(maxPowerAtRpm);
			_object.setMaxPowerPerLiter(maxPowerPerLiter);
			_object.setMaxRpm(maxRpm);
			_object.setMaxTorque(maxTorque);
			_object.setMaxTorqueAtRpm(maxTorqueAtRpm);
			_object.setNumberOfCylinders(numberOfCylinders);
			_object.setPower(power);
			_object.set__typename("Engine");
			return _object;
		}
	}
}
