/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("VinMappingFilterInput")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class VinMappingFilterInput 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public VinMappingFilterInput(){
		// No action
	}

	@JsonProperty("limit")
	@GraphQLScalar(fieldName = "limit", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer limit;


	@JsonProperty("modelYears")
	@GraphQLScalar(fieldName = "modelYears", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	List<Integer> modelYears;


	@JsonProperty("optionCodes")
	@GraphQLScalar(fieldName = "optionCodes", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> optionCodes;


	@JsonProperty("orderTypeCodes")
	@GraphQLScalar(fieldName = "orderTypeCodes", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> orderTypeCodes;



	public void setLimit(Integer limit) {
		this.limit = limit;
	}

	public Integer getLimit() {
		return limit;
	}
		

	public void setModelYears(List<Integer> modelYears) {
		this.modelYears = modelYears;
	}

	public List<Integer> getModelYears() {
		return modelYears;
	}
		

	public void setOptionCodes(List<String> optionCodes) {
		this.optionCodes = optionCodes;
	}

	public List<String> getOptionCodes() {
		return optionCodes;
	}
		

	public void setOrderTypeCodes(List<String> orderTypeCodes) {
		this.orderTypeCodes = orderTypeCodes;
	}

	public List<String> getOrderTypeCodes() {
		return orderTypeCodes;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "VinMappingFilterInput {"
				+ "limit: " + limit
				+ ", "
				+ "modelYears: " + modelYears
				+ ", "
				+ "optionCodes: " + optionCodes
				+ ", "
				+ "orderTypeCodes: " + orderTypeCodes
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private Integer limit;
		private List<Integer> modelYears;
		private List<String> optionCodes;
		private List<String> orderTypeCodes;

		public Builder withLimit(Integer limit) {
			this.limit = limit;
			return this;
		}
		public Builder withModelYears(List<Integer> modelYears) {
			this.modelYears = modelYears;
			return this;
		}
		public Builder withOptionCodes(List<String> optionCodes) {
			this.optionCodes = optionCodes;
			return this;
		}
		public Builder withOrderTypeCodes(List<String> orderTypeCodes) {
			this.orderTypeCodes = orderTypeCodes;
			return this;
		}

		public VinMappingFilterInput build() {
			VinMappingFilterInput _object = new VinMappingFilterInput();
			_object.setLimit(limit);
			_object.setModelYears(modelYears);
			_object.setOptionCodes(optionCodes);
			_object.setOrderTypeCodes(orderTypeCodes);
			return _object;
		}
	}
}
