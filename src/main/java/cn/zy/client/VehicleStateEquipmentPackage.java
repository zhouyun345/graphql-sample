/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import cn.zy.client.util.CustomJacksonDeserializers;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("VehicleStateEquipmentPackage")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class VehicleStateEquipmentPackage 
	implements EquipmentPackage{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public VehicleStateEquipmentPackage(){
		// No action
	}

	@JsonProperty("contents")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipmentPackageContent.class)
	@GraphQLNonScalar(fieldName = "contents", graphQLTypeSimpleName = "EquipmentPackageContent", javaClass = EquipmentPackageContent.class)
	List<EquipmentPackageContent> contents;


	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String optionCode;


	@JsonProperty("equipment")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListVehicleStateEquipment.class)
	@GraphQLInputParameters(names = {"filter"}, types = {"VehicleStateEquipmentOptionsFilterInput"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "equipment", graphQLTypeSimpleName = "VehicleStateEquipment", javaClass = VehicleStateEquipment.class)
	List<VehicleStateEquipment> equipment;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;




	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public void setContents(List<EquipmentPackageContent> contents) {
		if (contents == null || contents instanceof List) {
			this.contents = (List<EquipmentPackageContent>) (Object) contents;
		} else {
			throw new IllegalArgumentException("The given contents should be an instance of List<cn.zy.client.EquipmentPackageContent>, but is an instance of "
					+ contents.getClass().getName());
		}
	}
 

 	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<EquipmentPackageContent> getContents() {
		return (List<EquipmentPackageContent>) (Object) contents;
	}

	/**
	 */
	public List<EquipmentPackageContent> getContentsEquipmentPackageContent() {
		return contents;
	}


	/**
	 */
	@Override
	public void setOptionCode(String optionCode) {
		if (optionCode == null || optionCode instanceof String) {
			this.optionCode = (String) optionCode;
		} else {
			throw new IllegalArgumentException("The given optionCode should be an instance of java.lang.String, but is an instance of "
					+ optionCode.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public String getOptionCode() {
		return optionCode;
	}


	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public void setEquipment(List<Equipment> equipment) {
		if (equipment == null || equipment instanceof List) {
			// equipment is an instance of List<cn.zy.client.Equipment>. Let's check that this can be copied into a List<VehicleStateEquipment> 
			for (Object item : equipment) {
				if (! (item instanceof VehicleStateEquipment))
					throw new IllegalArgumentException("The given equipment should be a list of instances of cn.zy.client.VehicleStateEquipment, but at least one item is an instance of "
							+ item.getClass().getName());
			}
			this.equipment = (List<VehicleStateEquipment>) (Object) equipment;
		} else {
			throw new IllegalArgumentException("The given equipment should be an instance of List<cn.zy.client.VehicleStateEquipment>, but is an instance of "
					+ equipment.getClass().getName());
		}
	}
 

	/** 
	 * As the type declared in the class is not inherited from one of the implemented interfaces, we need a dedicated setter.
	 * <br/>
	 * As the GraphQL type of this field is a list of items that are not of the same type as the field defined in the implemented interface, 
	 * we need to have a dedicated setter with a specific name. This is due to Java that does type erasure on parameterized types (for 
	 * compatibility reasons with older java versions). As Java can't detect at runtime the type of the items of the list, it can't 
	 * decide which setter to call. To overcome this issue, this setter has a dedicated name.
	 * 
	 * @param
	 */
	public void setEquipmentVehicleStateEquipment(List<VehicleStateEquipment> equipment) {
		this.equipment = equipment;
	}

 	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<Equipment> getEquipment() {
		return (List<Equipment>) (Object) equipment;
	}

	/**
	 */
	public List<VehicleStateEquipment> getEquipmentVehicleStateEquipment() {
		return equipment;
	}


	/**
	 */
	@Override
	public void set__typename(String __typename) {
		if (__typename == null || __typename instanceof String) {
			this.__typename = (String) __typename;
		} else {
			throw new IllegalArgumentException("The given __typename should be an instance of java.lang.String, but is an instance of "
					+ __typename.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public String get__typename() {
		return __typename;
	}

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "VehicleStateEquipmentPackage {"
				+ "contents: " + contents
				+ ", "
				+ "optionCode: " + optionCode
				+ ", "
				+ "equipment: " + equipment
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private List<EquipmentPackageContent> contents;
		private String optionCode;
		private List<VehicleStateEquipment> equipment;

		public Builder withContents(List<EquipmentPackageContent> contents) {
			this.contents = contents;
			return this;
		}
		public Builder withOptionCode(String optionCode) {
			this.optionCode = optionCode;
			return this;
		}
		public Builder withEquipment(List<VehicleStateEquipment> equipment) {
			this.equipment = equipment;
			return this;
		}

		public VehicleStateEquipmentPackage build() {
			VehicleStateEquipmentPackage _object = new VehicleStateEquipmentPackage();
			_object.setContents(contents);
			_object.setOptionCode(optionCode);
			_object.setEquipmentVehicleStateEquipment(equipment);
			_object.set__typename("VehicleStateEquipmentPackage");
			return _object;
		}
	}
}
