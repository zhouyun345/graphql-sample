/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("Body")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class Body 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public Body(){
		// No action
	}

	@JsonProperty("approachDepartureAngle")
	@GraphQLNonScalar(fieldName = "approachDepartureAngle", graphQLTypeSimpleName = "ApproachDepartureAngle", javaClass = ApproachDepartureAngle.class)
	ApproachDepartureAngle approachDepartureAngle;


	@JsonProperty("dragCoefficient")
	@GraphQLNonScalar(fieldName = "dragCoefficient", graphQLTypeSimpleName = "DragTechnicalDataItem", javaClass = DragTechnicalDataItem.class)
	DragTechnicalDataItem dragCoefficient;


	@JsonProperty("fuelTankCapacity")
	@GraphQLNonScalar(fieldName = "fuelTankCapacity", graphQLTypeSimpleName = "FuelTankCapacityTechnicalDataItem", javaClass = FuelTankCapacityTechnicalDataItem.class)
	FuelTankCapacityTechnicalDataItem fuelTankCapacity;


	@JsonProperty("height")
	@GraphQLNonScalar(fieldName = "height", graphQLTypeSimpleName = "VehicleLengthTechnicalDataItem", javaClass = VehicleLengthTechnicalDataItem.class)
	VehicleLengthTechnicalDataItem height;


	@JsonProperty("length")
	@GraphQLNonScalar(fieldName = "length", graphQLTypeSimpleName = "VehicleLengthTechnicalDataItem", javaClass = VehicleLengthTechnicalDataItem.class)
	VehicleLengthTechnicalDataItem length;


	@JsonProperty("load")
	@GraphQLNonScalar(fieldName = "load", graphQLTypeSimpleName = "Load", javaClass = Load.class)
	Load load;


	@JsonProperty("luggage")
	@GraphQLNonScalar(fieldName = "luggage", graphQLTypeSimpleName = "Luggage", javaClass = Luggage.class)
	Luggage luggage;


	@JsonProperty("maxGroundClearance")
	@GraphQLNonScalar(fieldName = "maxGroundClearance", graphQLTypeSimpleName = "MaxGroundClearance", javaClass = MaxGroundClearance.class)
	MaxGroundClearance maxGroundClearance;


	@JsonProperty("maxWadingDepth")
	@GraphQLNonScalar(fieldName = "maxWadingDepth", graphQLTypeSimpleName = "MaxWadingDepth", javaClass = MaxWadingDepth.class)
	MaxWadingDepth maxWadingDepth;


	@JsonProperty("permissibleGrossWeight")
	@GraphQLNonScalar(fieldName = "permissibleGrossWeight", graphQLTypeSimpleName = "VehicleWeightTechnicalDataItem", javaClass = VehicleWeightTechnicalDataItem.class)
	VehicleWeightTechnicalDataItem permissibleGrossWeight;


	@JsonProperty("rampBreakOverAngle")
	@GraphQLNonScalar(fieldName = "rampBreakOverAngle", graphQLTypeSimpleName = "RampBreakOverAngle", javaClass = RampBreakOverAngle.class)
	RampBreakOverAngle rampBreakOverAngle;


	@JsonProperty("track")
	@GraphQLNonScalar(fieldName = "track", graphQLTypeSimpleName = "Track", javaClass = Track.class)
	Track track;


	@JsonProperty("trailerCoupling")
	@GraphQLNonScalar(fieldName = "trailerCoupling", graphQLTypeSimpleName = "TrailerCoupling", javaClass = TrailerCoupling.class)
	TrailerCoupling trailerCoupling;


	@JsonProperty("turningRadius")
	@GraphQLNonScalar(fieldName = "turningRadius", graphQLTypeSimpleName = "TurningRadiusTechnicalDataItem", javaClass = TurningRadiusTechnicalDataItem.class)
	TurningRadiusTechnicalDataItem turningRadius;


	@JsonProperty("unladenWeight")
	@GraphQLNonScalar(fieldName = "unladenWeight", graphQLTypeSimpleName = "UnladenWeight", javaClass = UnladenWeight.class)
	UnladenWeight unladenWeight;


	@JsonProperty("wheelBase")
	@GraphQLNonScalar(fieldName = "wheelBase", graphQLTypeSimpleName = "VehicleLengthTechnicalDataItem", javaClass = VehicleLengthTechnicalDataItem.class)
	VehicleLengthTechnicalDataItem wheelBase;


	@JsonProperty("width")
	@GraphQLNonScalar(fieldName = "width", graphQLTypeSimpleName = "Width", javaClass = Width.class)
	Width width;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setApproachDepartureAngle(ApproachDepartureAngle approachDepartureAngle) {
		this.approachDepartureAngle = approachDepartureAngle;
	}

	public ApproachDepartureAngle getApproachDepartureAngle() {
		return approachDepartureAngle;
	}
		

	public void setDragCoefficient(DragTechnicalDataItem dragCoefficient) {
		this.dragCoefficient = dragCoefficient;
	}

	public DragTechnicalDataItem getDragCoefficient() {
		return dragCoefficient;
	}
		

	public void setFuelTankCapacity(FuelTankCapacityTechnicalDataItem fuelTankCapacity) {
		this.fuelTankCapacity = fuelTankCapacity;
	}

	public FuelTankCapacityTechnicalDataItem getFuelTankCapacity() {
		return fuelTankCapacity;
	}
		

	public void setHeight(VehicleLengthTechnicalDataItem height) {
		this.height = height;
	}

	public VehicleLengthTechnicalDataItem getHeight() {
		return height;
	}
		

	public void setLength(VehicleLengthTechnicalDataItem length) {
		this.length = length;
	}

	public VehicleLengthTechnicalDataItem getLength() {
		return length;
	}
		

	public void setLoad(Load load) {
		this.load = load;
	}

	public Load getLoad() {
		return load;
	}
		

	public void setLuggage(Luggage luggage) {
		this.luggage = luggage;
	}

	public Luggage getLuggage() {
		return luggage;
	}
		

	public void setMaxGroundClearance(MaxGroundClearance maxGroundClearance) {
		this.maxGroundClearance = maxGroundClearance;
	}

	public MaxGroundClearance getMaxGroundClearance() {
		return maxGroundClearance;
	}
		

	public void setMaxWadingDepth(MaxWadingDepth maxWadingDepth) {
		this.maxWadingDepth = maxWadingDepth;
	}

	public MaxWadingDepth getMaxWadingDepth() {
		return maxWadingDepth;
	}
		

	public void setPermissibleGrossWeight(VehicleWeightTechnicalDataItem permissibleGrossWeight) {
		this.permissibleGrossWeight = permissibleGrossWeight;
	}

	public VehicleWeightTechnicalDataItem getPermissibleGrossWeight() {
		return permissibleGrossWeight;
	}
		

	public void setRampBreakOverAngle(RampBreakOverAngle rampBreakOverAngle) {
		this.rampBreakOverAngle = rampBreakOverAngle;
	}

	public RampBreakOverAngle getRampBreakOverAngle() {
		return rampBreakOverAngle;
	}
		

	public void setTrack(Track track) {
		this.track = track;
	}

	public Track getTrack() {
		return track;
	}
		

	public void setTrailerCoupling(TrailerCoupling trailerCoupling) {
		this.trailerCoupling = trailerCoupling;
	}

	public TrailerCoupling getTrailerCoupling() {
		return trailerCoupling;
	}
		

	public void setTurningRadius(TurningRadiusTechnicalDataItem turningRadius) {
		this.turningRadius = turningRadius;
	}

	public TurningRadiusTechnicalDataItem getTurningRadius() {
		return turningRadius;
	}
		

	public void setUnladenWeight(UnladenWeight unladenWeight) {
		this.unladenWeight = unladenWeight;
	}

	public UnladenWeight getUnladenWeight() {
		return unladenWeight;
	}
		

	public void setWheelBase(VehicleLengthTechnicalDataItem wheelBase) {
		this.wheelBase = wheelBase;
	}

	public VehicleLengthTechnicalDataItem getWheelBase() {
		return wheelBase;
	}
		

	public void setWidth(Width width) {
		this.width = width;
	}

	public Width getWidth() {
		return width;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "Body {"
				+ "approachDepartureAngle: " + approachDepartureAngle
				+ ", "
				+ "dragCoefficient: " + dragCoefficient
				+ ", "
				+ "fuelTankCapacity: " + fuelTankCapacity
				+ ", "
				+ "height: " + height
				+ ", "
				+ "length: " + length
				+ ", "
				+ "load: " + load
				+ ", "
				+ "luggage: " + luggage
				+ ", "
				+ "maxGroundClearance: " + maxGroundClearance
				+ ", "
				+ "maxWadingDepth: " + maxWadingDepth
				+ ", "
				+ "permissibleGrossWeight: " + permissibleGrossWeight
				+ ", "
				+ "rampBreakOverAngle: " + rampBreakOverAngle
				+ ", "
				+ "track: " + track
				+ ", "
				+ "trailerCoupling: " + trailerCoupling
				+ ", "
				+ "turningRadius: " + turningRadius
				+ ", "
				+ "unladenWeight: " + unladenWeight
				+ ", "
				+ "wheelBase: " + wheelBase
				+ ", "
				+ "width: " + width
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private ApproachDepartureAngle approachDepartureAngle;
		private DragTechnicalDataItem dragCoefficient;
		private FuelTankCapacityTechnicalDataItem fuelTankCapacity;
		private VehicleLengthTechnicalDataItem height;
		private VehicleLengthTechnicalDataItem length;
		private Load load;
		private Luggage luggage;
		private MaxGroundClearance maxGroundClearance;
		private MaxWadingDepth maxWadingDepth;
		private VehicleWeightTechnicalDataItem permissibleGrossWeight;
		private RampBreakOverAngle rampBreakOverAngle;
		private Track track;
		private TrailerCoupling trailerCoupling;
		private TurningRadiusTechnicalDataItem turningRadius;
		private UnladenWeight unladenWeight;
		private VehicleLengthTechnicalDataItem wheelBase;
		private Width width;

		public Builder withApproachDepartureAngle(ApproachDepartureAngle approachDepartureAngle) {
			this.approachDepartureAngle = approachDepartureAngle;
			return this;
		}
		public Builder withDragCoefficient(DragTechnicalDataItem dragCoefficient) {
			this.dragCoefficient = dragCoefficient;
			return this;
		}
		public Builder withFuelTankCapacity(FuelTankCapacityTechnicalDataItem fuelTankCapacity) {
			this.fuelTankCapacity = fuelTankCapacity;
			return this;
		}
		public Builder withHeight(VehicleLengthTechnicalDataItem height) {
			this.height = height;
			return this;
		}
		public Builder withLength(VehicleLengthTechnicalDataItem length) {
			this.length = length;
			return this;
		}
		public Builder withLoad(Load load) {
			this.load = load;
			return this;
		}
		public Builder withLuggage(Luggage luggage) {
			this.luggage = luggage;
			return this;
		}
		public Builder withMaxGroundClearance(MaxGroundClearance maxGroundClearance) {
			this.maxGroundClearance = maxGroundClearance;
			return this;
		}
		public Builder withMaxWadingDepth(MaxWadingDepth maxWadingDepth) {
			this.maxWadingDepth = maxWadingDepth;
			return this;
		}
		public Builder withPermissibleGrossWeight(VehicleWeightTechnicalDataItem permissibleGrossWeight) {
			this.permissibleGrossWeight = permissibleGrossWeight;
			return this;
		}
		public Builder withRampBreakOverAngle(RampBreakOverAngle rampBreakOverAngle) {
			this.rampBreakOverAngle = rampBreakOverAngle;
			return this;
		}
		public Builder withTrack(Track track) {
			this.track = track;
			return this;
		}
		public Builder withTrailerCoupling(TrailerCoupling trailerCoupling) {
			this.trailerCoupling = trailerCoupling;
			return this;
		}
		public Builder withTurningRadius(TurningRadiusTechnicalDataItem turningRadius) {
			this.turningRadius = turningRadius;
			return this;
		}
		public Builder withUnladenWeight(UnladenWeight unladenWeight) {
			this.unladenWeight = unladenWeight;
			return this;
		}
		public Builder withWheelBase(VehicleLengthTechnicalDataItem wheelBase) {
			this.wheelBase = wheelBase;
			return this;
		}
		public Builder withWidth(Width width) {
			this.width = width;
			return this;
		}

		public Body build() {
			Body _object = new Body();
			_object.setApproachDepartureAngle(approachDepartureAngle);
			_object.setDragCoefficient(dragCoefficient);
			_object.setFuelTankCapacity(fuelTankCapacity);
			_object.setHeight(height);
			_object.setLength(length);
			_object.setLoad(load);
			_object.setLuggage(luggage);
			_object.setMaxGroundClearance(maxGroundClearance);
			_object.setMaxWadingDepth(maxWadingDepth);
			_object.setPermissibleGrossWeight(permissibleGrossWeight);
			_object.setRampBreakOverAngle(rampBreakOverAngle);
			_object.setTrack(track);
			_object.setTrailerCoupling(trailerCoupling);
			_object.setTurningRadius(turningRadius);
			_object.setUnladenWeight(unladenWeight);
			_object.setWheelBase(wheelBase);
			_object.setWidth(width);
			_object.set__typename("Body");
			return _object;
		}
	}
}
