/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("FormattedGermanEnergyEfficiency")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class FormattedGermanEnergyEfficiency 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public FormattedGermanEnergyEfficiency(){
		// No action
	}

	@JsonProperty("co2Emission")
	@GraphQLScalar(fieldName = "co2Emission", graphQLTypeSimpleName = "String", javaClass = String.class)
	String co2Emission;


	@JsonProperty("electricityConsumption")
	@GraphQLScalar(fieldName = "electricityConsumption", graphQLTypeSimpleName = "String", javaClass = String.class)
	String electricityConsumption;


	@JsonProperty("electricityCostPerUnit")
	@GraphQLScalar(fieldName = "electricityCostPerUnit", graphQLTypeSimpleName = "String", javaClass = String.class)
	String electricityCostPerUnit;


	@JsonProperty("electricityTaxFactor")
	@GraphQLScalar(fieldName = "electricityTaxFactor", graphQLTypeSimpleName = "String", javaClass = String.class)
	String electricityTaxFactor;


	@JsonProperty("energyEfficiencyClass")
	@GraphQLScalar(fieldName = "energyEfficiencyClass", graphQLTypeSimpleName = "String", javaClass = String.class)
	String energyEfficiencyClass;


	@JsonProperty("energyEfficiencyClassLabel")
	@GraphQLScalar(fieldName = "energyEfficiencyClassLabel", graphQLTypeSimpleName = "String", javaClass = String.class)
	String energyEfficiencyClassLabel;


	@JsonProperty("exemptionLimit")
	@GraphQLScalar(fieldName = "exemptionLimit", graphQLTypeSimpleName = "String", javaClass = String.class)
	String exemptionLimit;


	@JsonProperty("fuelConsumptionCombined")
	@GraphQLScalar(fieldName = "fuelConsumptionCombined", graphQLTypeSimpleName = "String", javaClass = String.class)
	String fuelConsumptionCombined;


	@JsonProperty("fuelConsumptionExtraUrban")
	@GraphQLScalar(fieldName = "fuelConsumptionExtraUrban", graphQLTypeSimpleName = "String", javaClass = String.class)
	String fuelConsumptionExtraUrban;


	@JsonProperty("fuelConsumptionUrban")
	@GraphQLScalar(fieldName = "fuelConsumptionUrban", graphQLTypeSimpleName = "String", javaClass = String.class)
	String fuelConsumptionUrban;


	@JsonProperty("fuelCostPerUnit")
	@GraphQLScalar(fieldName = "fuelCostPerUnit", graphQLTypeSimpleName = "String", javaClass = String.class)
	String fuelCostPerUnit;


	@JsonProperty("fuelTaxFactor")
	@GraphQLScalar(fieldName = "fuelTaxFactor", graphQLTypeSimpleName = "String", javaClass = String.class)
	String fuelTaxFactor;


	@JsonProperty("fuelType")
	@GraphQLScalar(fieldName = "fuelType", graphQLTypeSimpleName = "String", javaClass = String.class)
	String fuelType;


	@JsonProperty("model")
	@GraphQLScalar(fieldName = "model", graphQLTypeSimpleName = "String", javaClass = String.class)
	String model;


	@JsonProperty("otherEnergyTypes")
	@GraphQLScalar(fieldName = "otherEnergyTypes", graphQLTypeSimpleName = "String", javaClass = String.class)
	String otherEnergyTypes;


	@JsonProperty("power")
	@GraphQLScalar(fieldName = "power", graphQLTypeSimpleName = "String", javaClass = String.class)
	String power;


	@JsonProperty("powerLabel")
	@GraphQLScalar(fieldName = "powerLabel", graphQLTypeSimpleName = "String", javaClass = String.class)
	String powerLabel;


	@JsonProperty("transmission")
	@GraphQLScalar(fieldName = "transmission", graphQLTypeSimpleName = "String", javaClass = String.class)
	String transmission;


	@JsonProperty("unladenWeight")
	@GraphQLScalar(fieldName = "unladenWeight", graphQLTypeSimpleName = "String", javaClass = String.class)
	String unladenWeight;


	@JsonProperty("yearlyElectricityCostNEDC")
	@GraphQLScalar(fieldName = "yearlyElectricityCostNEDC", graphQLTypeSimpleName = "String", javaClass = String.class)
	String yearlyElectricityCostNEDC;


	@JsonProperty("yearlyElectricityCostWLTP")
	@GraphQLScalar(fieldName = "yearlyElectricityCostWLTP", graphQLTypeSimpleName = "String", javaClass = String.class)
	String yearlyElectricityCostWLTP;


	@JsonProperty("yearlyFuelCostNEDC")
	@GraphQLScalar(fieldName = "yearlyFuelCostNEDC", graphQLTypeSimpleName = "String", javaClass = String.class)
	String yearlyFuelCostNEDC;


	@JsonProperty("yearlyFuelCostWLTP")
	@GraphQLScalar(fieldName = "yearlyFuelCostWLTP", graphQLTypeSimpleName = "String", javaClass = String.class)
	String yearlyFuelCostWLTP;


	@JsonProperty("yearlyKilometers")
	@GraphQLScalar(fieldName = "yearlyKilometers", graphQLTypeSimpleName = "String", javaClass = String.class)
	String yearlyKilometers;


	@JsonProperty("yearlyTax")
	@GraphQLScalar(fieldName = "yearlyTax", graphQLTypeSimpleName = "String", javaClass = String.class)
	String yearlyTax;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setCo2Emission(String co2Emission) {
		this.co2Emission = co2Emission;
	}

	public String getCo2Emission() {
		return co2Emission;
	}
		

	public void setElectricityConsumption(String electricityConsumption) {
		this.electricityConsumption = electricityConsumption;
	}

	public String getElectricityConsumption() {
		return electricityConsumption;
	}
		

	public void setElectricityCostPerUnit(String electricityCostPerUnit) {
		this.electricityCostPerUnit = electricityCostPerUnit;
	}

	public String getElectricityCostPerUnit() {
		return electricityCostPerUnit;
	}
		

	public void setElectricityTaxFactor(String electricityTaxFactor) {
		this.electricityTaxFactor = electricityTaxFactor;
	}

	public String getElectricityTaxFactor() {
		return electricityTaxFactor;
	}
		

	public void setEnergyEfficiencyClass(String energyEfficiencyClass) {
		this.energyEfficiencyClass = energyEfficiencyClass;
	}

	public String getEnergyEfficiencyClass() {
		return energyEfficiencyClass;
	}
		

	public void setEnergyEfficiencyClassLabel(String energyEfficiencyClassLabel) {
		this.energyEfficiencyClassLabel = energyEfficiencyClassLabel;
	}

	public String getEnergyEfficiencyClassLabel() {
		return energyEfficiencyClassLabel;
	}
		

	public void setExemptionLimit(String exemptionLimit) {
		this.exemptionLimit = exemptionLimit;
	}

	public String getExemptionLimit() {
		return exemptionLimit;
	}
		

	public void setFuelConsumptionCombined(String fuelConsumptionCombined) {
		this.fuelConsumptionCombined = fuelConsumptionCombined;
	}

	public String getFuelConsumptionCombined() {
		return fuelConsumptionCombined;
	}
		

	public void setFuelConsumptionExtraUrban(String fuelConsumptionExtraUrban) {
		this.fuelConsumptionExtraUrban = fuelConsumptionExtraUrban;
	}

	public String getFuelConsumptionExtraUrban() {
		return fuelConsumptionExtraUrban;
	}
		

	public void setFuelConsumptionUrban(String fuelConsumptionUrban) {
		this.fuelConsumptionUrban = fuelConsumptionUrban;
	}

	public String getFuelConsumptionUrban() {
		return fuelConsumptionUrban;
	}
		

	public void setFuelCostPerUnit(String fuelCostPerUnit) {
		this.fuelCostPerUnit = fuelCostPerUnit;
	}

	public String getFuelCostPerUnit() {
		return fuelCostPerUnit;
	}
		

	public void setFuelTaxFactor(String fuelTaxFactor) {
		this.fuelTaxFactor = fuelTaxFactor;
	}

	public String getFuelTaxFactor() {
		return fuelTaxFactor;
	}
		

	public void setFuelType(String fuelType) {
		this.fuelType = fuelType;
	}

	public String getFuelType() {
		return fuelType;
	}
		

	public void setModel(String model) {
		this.model = model;
	}

	public String getModel() {
		return model;
	}
		

	public void setOtherEnergyTypes(String otherEnergyTypes) {
		this.otherEnergyTypes = otherEnergyTypes;
	}

	public String getOtherEnergyTypes() {
		return otherEnergyTypes;
	}
		

	public void setPower(String power) {
		this.power = power;
	}

	public String getPower() {
		return power;
	}
		

	public void setPowerLabel(String powerLabel) {
		this.powerLabel = powerLabel;
	}

	public String getPowerLabel() {
		return powerLabel;
	}
		

	public void setTransmission(String transmission) {
		this.transmission = transmission;
	}

	public String getTransmission() {
		return transmission;
	}
		

	public void setUnladenWeight(String unladenWeight) {
		this.unladenWeight = unladenWeight;
	}

	public String getUnladenWeight() {
		return unladenWeight;
	}
		

	public void setYearlyElectricityCostNEDC(String yearlyElectricityCostNEDC) {
		this.yearlyElectricityCostNEDC = yearlyElectricityCostNEDC;
	}

	public String getYearlyElectricityCostNEDC() {
		return yearlyElectricityCostNEDC;
	}
		

	public void setYearlyElectricityCostWLTP(String yearlyElectricityCostWLTP) {
		this.yearlyElectricityCostWLTP = yearlyElectricityCostWLTP;
	}

	public String getYearlyElectricityCostWLTP() {
		return yearlyElectricityCostWLTP;
	}
		

	public void setYearlyFuelCostNEDC(String yearlyFuelCostNEDC) {
		this.yearlyFuelCostNEDC = yearlyFuelCostNEDC;
	}

	public String getYearlyFuelCostNEDC() {
		return yearlyFuelCostNEDC;
	}
		

	public void setYearlyFuelCostWLTP(String yearlyFuelCostWLTP) {
		this.yearlyFuelCostWLTP = yearlyFuelCostWLTP;
	}

	public String getYearlyFuelCostWLTP() {
		return yearlyFuelCostWLTP;
	}
		

	public void setYearlyKilometers(String yearlyKilometers) {
		this.yearlyKilometers = yearlyKilometers;
	}

	public String getYearlyKilometers() {
		return yearlyKilometers;
	}
		

	public void setYearlyTax(String yearlyTax) {
		this.yearlyTax = yearlyTax;
	}

	public String getYearlyTax() {
		return yearlyTax;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "FormattedGermanEnergyEfficiency {"
				+ "co2Emission: " + co2Emission
				+ ", "
				+ "electricityConsumption: " + electricityConsumption
				+ ", "
				+ "electricityCostPerUnit: " + electricityCostPerUnit
				+ ", "
				+ "electricityTaxFactor: " + electricityTaxFactor
				+ ", "
				+ "energyEfficiencyClass: " + energyEfficiencyClass
				+ ", "
				+ "energyEfficiencyClassLabel: " + energyEfficiencyClassLabel
				+ ", "
				+ "exemptionLimit: " + exemptionLimit
				+ ", "
				+ "fuelConsumptionCombined: " + fuelConsumptionCombined
				+ ", "
				+ "fuelConsumptionExtraUrban: " + fuelConsumptionExtraUrban
				+ ", "
				+ "fuelConsumptionUrban: " + fuelConsumptionUrban
				+ ", "
				+ "fuelCostPerUnit: " + fuelCostPerUnit
				+ ", "
				+ "fuelTaxFactor: " + fuelTaxFactor
				+ ", "
				+ "fuelType: " + fuelType
				+ ", "
				+ "model: " + model
				+ ", "
				+ "otherEnergyTypes: " + otherEnergyTypes
				+ ", "
				+ "power: " + power
				+ ", "
				+ "powerLabel: " + powerLabel
				+ ", "
				+ "transmission: " + transmission
				+ ", "
				+ "unladenWeight: " + unladenWeight
				+ ", "
				+ "yearlyElectricityCostNEDC: " + yearlyElectricityCostNEDC
				+ ", "
				+ "yearlyElectricityCostWLTP: " + yearlyElectricityCostWLTP
				+ ", "
				+ "yearlyFuelCostNEDC: " + yearlyFuelCostNEDC
				+ ", "
				+ "yearlyFuelCostWLTP: " + yearlyFuelCostWLTP
				+ ", "
				+ "yearlyKilometers: " + yearlyKilometers
				+ ", "
				+ "yearlyTax: " + yearlyTax
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private String co2Emission;
		private String electricityConsumption;
		private String electricityCostPerUnit;
		private String electricityTaxFactor;
		private String energyEfficiencyClass;
		private String energyEfficiencyClassLabel;
		private String exemptionLimit;
		private String fuelConsumptionCombined;
		private String fuelConsumptionExtraUrban;
		private String fuelConsumptionUrban;
		private String fuelCostPerUnit;
		private String fuelTaxFactor;
		private String fuelType;
		private String model;
		private String otherEnergyTypes;
		private String power;
		private String powerLabel;
		private String transmission;
		private String unladenWeight;
		private String yearlyElectricityCostNEDC;
		private String yearlyElectricityCostWLTP;
		private String yearlyFuelCostNEDC;
		private String yearlyFuelCostWLTP;
		private String yearlyKilometers;
		private String yearlyTax;

		public Builder withCo2Emission(String co2Emission) {
			this.co2Emission = co2Emission;
			return this;
		}
		public Builder withElectricityConsumption(String electricityConsumption) {
			this.electricityConsumption = electricityConsumption;
			return this;
		}
		public Builder withElectricityCostPerUnit(String electricityCostPerUnit) {
			this.electricityCostPerUnit = electricityCostPerUnit;
			return this;
		}
		public Builder withElectricityTaxFactor(String electricityTaxFactor) {
			this.electricityTaxFactor = electricityTaxFactor;
			return this;
		}
		public Builder withEnergyEfficiencyClass(String energyEfficiencyClass) {
			this.energyEfficiencyClass = energyEfficiencyClass;
			return this;
		}
		public Builder withEnergyEfficiencyClassLabel(String energyEfficiencyClassLabel) {
			this.energyEfficiencyClassLabel = energyEfficiencyClassLabel;
			return this;
		}
		public Builder withExemptionLimit(String exemptionLimit) {
			this.exemptionLimit = exemptionLimit;
			return this;
		}
		public Builder withFuelConsumptionCombined(String fuelConsumptionCombined) {
			this.fuelConsumptionCombined = fuelConsumptionCombined;
			return this;
		}
		public Builder withFuelConsumptionExtraUrban(String fuelConsumptionExtraUrban) {
			this.fuelConsumptionExtraUrban = fuelConsumptionExtraUrban;
			return this;
		}
		public Builder withFuelConsumptionUrban(String fuelConsumptionUrban) {
			this.fuelConsumptionUrban = fuelConsumptionUrban;
			return this;
		}
		public Builder withFuelCostPerUnit(String fuelCostPerUnit) {
			this.fuelCostPerUnit = fuelCostPerUnit;
			return this;
		}
		public Builder withFuelTaxFactor(String fuelTaxFactor) {
			this.fuelTaxFactor = fuelTaxFactor;
			return this;
		}
		public Builder withFuelType(String fuelType) {
			this.fuelType = fuelType;
			return this;
		}
		public Builder withModel(String model) {
			this.model = model;
			return this;
		}
		public Builder withOtherEnergyTypes(String otherEnergyTypes) {
			this.otherEnergyTypes = otherEnergyTypes;
			return this;
		}
		public Builder withPower(String power) {
			this.power = power;
			return this;
		}
		public Builder withPowerLabel(String powerLabel) {
			this.powerLabel = powerLabel;
			return this;
		}
		public Builder withTransmission(String transmission) {
			this.transmission = transmission;
			return this;
		}
		public Builder withUnladenWeight(String unladenWeight) {
			this.unladenWeight = unladenWeight;
			return this;
		}
		public Builder withYearlyElectricityCostNEDC(String yearlyElectricityCostNEDC) {
			this.yearlyElectricityCostNEDC = yearlyElectricityCostNEDC;
			return this;
		}
		public Builder withYearlyElectricityCostWLTP(String yearlyElectricityCostWLTP) {
			this.yearlyElectricityCostWLTP = yearlyElectricityCostWLTP;
			return this;
		}
		public Builder withYearlyFuelCostNEDC(String yearlyFuelCostNEDC) {
			this.yearlyFuelCostNEDC = yearlyFuelCostNEDC;
			return this;
		}
		public Builder withYearlyFuelCostWLTP(String yearlyFuelCostWLTP) {
			this.yearlyFuelCostWLTP = yearlyFuelCostWLTP;
			return this;
		}
		public Builder withYearlyKilometers(String yearlyKilometers) {
			this.yearlyKilometers = yearlyKilometers;
			return this;
		}
		public Builder withYearlyTax(String yearlyTax) {
			this.yearlyTax = yearlyTax;
			return this;
		}

		public FormattedGermanEnergyEfficiency build() {
			FormattedGermanEnergyEfficiency _object = new FormattedGermanEnergyEfficiency();
			_object.setCo2Emission(co2Emission);
			_object.setElectricityConsumption(electricityConsumption);
			_object.setElectricityCostPerUnit(electricityCostPerUnit);
			_object.setElectricityTaxFactor(electricityTaxFactor);
			_object.setEnergyEfficiencyClass(energyEfficiencyClass);
			_object.setEnergyEfficiencyClassLabel(energyEfficiencyClassLabel);
			_object.setExemptionLimit(exemptionLimit);
			_object.setFuelConsumptionCombined(fuelConsumptionCombined);
			_object.setFuelConsumptionExtraUrban(fuelConsumptionExtraUrban);
			_object.setFuelConsumptionUrban(fuelConsumptionUrban);
			_object.setFuelCostPerUnit(fuelCostPerUnit);
			_object.setFuelTaxFactor(fuelTaxFactor);
			_object.setFuelType(fuelType);
			_object.setModel(model);
			_object.setOtherEnergyTypes(otherEnergyTypes);
			_object.setPower(power);
			_object.setPowerLabel(powerLabel);
			_object.setTransmission(transmission);
			_object.setUnladenWeight(unladenWeight);
			_object.setYearlyElectricityCostNEDC(yearlyElectricityCostNEDC);
			_object.setYearlyElectricityCostWLTP(yearlyElectricityCostWLTP);
			_object.setYearlyFuelCostNEDC(yearlyFuelCostNEDC);
			_object.setYearlyFuelCostWLTP(yearlyFuelCostWLTP);
			_object.setYearlyKilometers(yearlyKilometers);
			_object.setYearlyTax(yearlyTax);
			_object.set__typename("FormattedGermanEnergyEfficiency");
			return _object;
		}
	}
}
