/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
@JsonSubTypes({ @Type(value = AccelerationMeasurement.class, name = "AccelerationMeasurement"), @Type(value = AngleMeasurement.class, name = "AngleMeasurement"), @Type(value = BodyDetailLengthMeasurement.class, name = "BodyDetailLengthMeasurement"), @Type(value = ChargingPowerMeasurement.class, name = "ChargingPowerMeasurement"), @Type(value = ChargingTimeAcMeasurement.class, name = "ChargingTimeAcMeasurement"), @Type(value = ChargingTimeDcMeasurement.class, name = "ChargingTimeDcMeasurement"), @Type(value = DisplacementMeasurement.class, name = "DisplacementMeasurement"), @Type(value = DragMeasurement.class, name = "DragMeasurement"), @Type(value = ElectricCapacityMeasurement.class, name = "ElectricCapacityMeasurement"), @Type(value = ElectricConsumptionEquivalentMeasurement.class, name = "ElectricConsumptionEquivalentMeasurement"), @Type(value = ElectricConsumptionMeasurement.class, name = "ElectricConsumptionMeasurement"), @Type(value = EmissionMeasurement.class, name = "EmissionMeasurement"), @Type(value = EngineDetailLengthMeasurement.class, name = "EngineDetailLengthMeasurement"), @Type(value = FuelConsumptionMeasurement.class, name = "FuelConsumptionMeasurement"), @Type(value = FuelTankCapacityMeasurement.class, name = "FuelTankCapacityMeasurement"), @Type(value = LuggageVolumeMeasurement.class, name = "LuggageVolumeMeasurement"), @Type(value = RangeMeasurement.class, name = "RangeMeasurement"), @Type(value = RpmMeasurement.class, name = "RpmMeasurement"), @Type(value = RpmRangeMeasurement.class, name = "RpmRangeMeasurement"), @Type(value = SpeedMeasurement.class, name = "SpeedMeasurement"), @Type(value = TorqueMeasurement.class, name = "TorqueMeasurement"), @Type(value = TurningRadiusMeasurement.class, name = "TurningRadiusMeasurement"), @Type(value = VehicleLengthMeasurement.class, name = "VehicleLengthMeasurement"), @Type(value = VehicleWeightMeasurement.class, name = "VehicleWeightMeasurement") })
@GraphQLInterfaceType("Measurement")
@SuppressWarnings("unused")
public interface Measurement  {

	@JsonProperty("formattedInMarketplace")
	@GraphQLNonScalar(fieldName = "formattedInMarketplace", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public void setFormattedInMarketplace(TranslatedText formattedInMarketplace);

	@JsonProperty("formattedInMarketplace")
	@GraphQLNonScalar(fieldName = "formattedInMarketplace", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public TranslatedText getFormattedInMarketplace();

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void set__typename(String __typename);

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String get__typename();

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue);

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias);

}
