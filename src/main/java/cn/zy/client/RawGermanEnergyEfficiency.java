/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("RawGermanEnergyEfficiency")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class RawGermanEnergyEfficiency 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public RawGermanEnergyEfficiency(){
		// No action
	}

	@JsonProperty("electricityCostPerUnit")
	@GraphQLNonScalar(fieldName = "electricityCostPerUnit", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat electricityCostPerUnit;


	@JsonProperty("electricityTaxFactor")
	@GraphQLNonScalar(fieldName = "electricityTaxFactor", graphQLTypeSimpleName = "FloatValue", javaClass = FloatValue.class)
	FloatValue electricityTaxFactor;


	@JsonProperty("energyEfficiencyClass")
	@GraphQLScalar(fieldName = "energyEfficiencyClass", graphQLTypeSimpleName = "String", javaClass = String.class)
	String energyEfficiencyClass;


	@JsonProperty("exemptionLimit")
	@GraphQLNonScalar(fieldName = "exemptionLimit", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat exemptionLimit;


	@JsonProperty("fuelCostPerUnit")
	@GraphQLNonScalar(fieldName = "fuelCostPerUnit", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat fuelCostPerUnit;


	@JsonProperty("fuelTaxFactor")
	@GraphQLNonScalar(fieldName = "fuelTaxFactor", graphQLTypeSimpleName = "FloatValue", javaClass = FloatValue.class)
	FloatValue fuelTaxFactor;


	@JsonProperty("yearlyElectricityCostNEDC")
	@GraphQLNonScalar(fieldName = "yearlyElectricityCostNEDC", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat yearlyElectricityCostNEDC;


	@JsonProperty("yearlyElectricityCostWLTP")
	@GraphQLNonScalar(fieldName = "yearlyElectricityCostWLTP", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat yearlyElectricityCostWLTP;


	@JsonProperty("yearlyFuelCostNEDC")
	@GraphQLNonScalar(fieldName = "yearlyFuelCostNEDC", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat yearlyFuelCostNEDC;


	@JsonProperty("yearlyFuelCostWLTP")
	@GraphQLNonScalar(fieldName = "yearlyFuelCostWLTP", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat yearlyFuelCostWLTP;


	@JsonProperty("yearlyKilometers")
	@GraphQLNonScalar(fieldName = "yearlyKilometers", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat yearlyKilometers;


	@JsonProperty("yearlyTax")
	@GraphQLNonScalar(fieldName = "yearlyTax", graphQLTypeSimpleName = "MeasuredFloat", javaClass = MeasuredFloat.class)
	MeasuredFloat yearlyTax;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setElectricityCostPerUnit(MeasuredFloat electricityCostPerUnit) {
		this.electricityCostPerUnit = electricityCostPerUnit;
	}

	public MeasuredFloat getElectricityCostPerUnit() {
		return electricityCostPerUnit;
	}
		

	public void setElectricityTaxFactor(FloatValue electricityTaxFactor) {
		this.electricityTaxFactor = electricityTaxFactor;
	}

	public FloatValue getElectricityTaxFactor() {
		return electricityTaxFactor;
	}
		

	public void setEnergyEfficiencyClass(String energyEfficiencyClass) {
		this.energyEfficiencyClass = energyEfficiencyClass;
	}

	public String getEnergyEfficiencyClass() {
		return energyEfficiencyClass;
	}
		

	public void setExemptionLimit(MeasuredFloat exemptionLimit) {
		this.exemptionLimit = exemptionLimit;
	}

	public MeasuredFloat getExemptionLimit() {
		return exemptionLimit;
	}
		

	public void setFuelCostPerUnit(MeasuredFloat fuelCostPerUnit) {
		this.fuelCostPerUnit = fuelCostPerUnit;
	}

	public MeasuredFloat getFuelCostPerUnit() {
		return fuelCostPerUnit;
	}
		

	public void setFuelTaxFactor(FloatValue fuelTaxFactor) {
		this.fuelTaxFactor = fuelTaxFactor;
	}

	public FloatValue getFuelTaxFactor() {
		return fuelTaxFactor;
	}
		

	public void setYearlyElectricityCostNEDC(MeasuredFloat yearlyElectricityCostNEDC) {
		this.yearlyElectricityCostNEDC = yearlyElectricityCostNEDC;
	}

	public MeasuredFloat getYearlyElectricityCostNEDC() {
		return yearlyElectricityCostNEDC;
	}
		

	public void setYearlyElectricityCostWLTP(MeasuredFloat yearlyElectricityCostWLTP) {
		this.yearlyElectricityCostWLTP = yearlyElectricityCostWLTP;
	}

	public MeasuredFloat getYearlyElectricityCostWLTP() {
		return yearlyElectricityCostWLTP;
	}
		

	public void setYearlyFuelCostNEDC(MeasuredFloat yearlyFuelCostNEDC) {
		this.yearlyFuelCostNEDC = yearlyFuelCostNEDC;
	}

	public MeasuredFloat getYearlyFuelCostNEDC() {
		return yearlyFuelCostNEDC;
	}
		

	public void setYearlyFuelCostWLTP(MeasuredFloat yearlyFuelCostWLTP) {
		this.yearlyFuelCostWLTP = yearlyFuelCostWLTP;
	}

	public MeasuredFloat getYearlyFuelCostWLTP() {
		return yearlyFuelCostWLTP;
	}
		

	public void setYearlyKilometers(MeasuredFloat yearlyKilometers) {
		this.yearlyKilometers = yearlyKilometers;
	}

	public MeasuredFloat getYearlyKilometers() {
		return yearlyKilometers;
	}
		

	public void setYearlyTax(MeasuredFloat yearlyTax) {
		this.yearlyTax = yearlyTax;
	}

	public MeasuredFloat getYearlyTax() {
		return yearlyTax;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "RawGermanEnergyEfficiency {"
				+ "electricityCostPerUnit: " + electricityCostPerUnit
				+ ", "
				+ "electricityTaxFactor: " + electricityTaxFactor
				+ ", "
				+ "energyEfficiencyClass: " + energyEfficiencyClass
				+ ", "
				+ "exemptionLimit: " + exemptionLimit
				+ ", "
				+ "fuelCostPerUnit: " + fuelCostPerUnit
				+ ", "
				+ "fuelTaxFactor: " + fuelTaxFactor
				+ ", "
				+ "yearlyElectricityCostNEDC: " + yearlyElectricityCostNEDC
				+ ", "
				+ "yearlyElectricityCostWLTP: " + yearlyElectricityCostWLTP
				+ ", "
				+ "yearlyFuelCostNEDC: " + yearlyFuelCostNEDC
				+ ", "
				+ "yearlyFuelCostWLTP: " + yearlyFuelCostWLTP
				+ ", "
				+ "yearlyKilometers: " + yearlyKilometers
				+ ", "
				+ "yearlyTax: " + yearlyTax
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private MeasuredFloat electricityCostPerUnit;
		private FloatValue electricityTaxFactor;
		private String energyEfficiencyClass;
		private MeasuredFloat exemptionLimit;
		private MeasuredFloat fuelCostPerUnit;
		private FloatValue fuelTaxFactor;
		private MeasuredFloat yearlyElectricityCostNEDC;
		private MeasuredFloat yearlyElectricityCostWLTP;
		private MeasuredFloat yearlyFuelCostNEDC;
		private MeasuredFloat yearlyFuelCostWLTP;
		private MeasuredFloat yearlyKilometers;
		private MeasuredFloat yearlyTax;

		public Builder withElectricityCostPerUnit(MeasuredFloat electricityCostPerUnit) {
			this.electricityCostPerUnit = electricityCostPerUnit;
			return this;
		}
		public Builder withElectricityTaxFactor(FloatValue electricityTaxFactor) {
			this.electricityTaxFactor = electricityTaxFactor;
			return this;
		}
		public Builder withEnergyEfficiencyClass(String energyEfficiencyClass) {
			this.energyEfficiencyClass = energyEfficiencyClass;
			return this;
		}
		public Builder withExemptionLimit(MeasuredFloat exemptionLimit) {
			this.exemptionLimit = exemptionLimit;
			return this;
		}
		public Builder withFuelCostPerUnit(MeasuredFloat fuelCostPerUnit) {
			this.fuelCostPerUnit = fuelCostPerUnit;
			return this;
		}
		public Builder withFuelTaxFactor(FloatValue fuelTaxFactor) {
			this.fuelTaxFactor = fuelTaxFactor;
			return this;
		}
		public Builder withYearlyElectricityCostNEDC(MeasuredFloat yearlyElectricityCostNEDC) {
			this.yearlyElectricityCostNEDC = yearlyElectricityCostNEDC;
			return this;
		}
		public Builder withYearlyElectricityCostWLTP(MeasuredFloat yearlyElectricityCostWLTP) {
			this.yearlyElectricityCostWLTP = yearlyElectricityCostWLTP;
			return this;
		}
		public Builder withYearlyFuelCostNEDC(MeasuredFloat yearlyFuelCostNEDC) {
			this.yearlyFuelCostNEDC = yearlyFuelCostNEDC;
			return this;
		}
		public Builder withYearlyFuelCostWLTP(MeasuredFloat yearlyFuelCostWLTP) {
			this.yearlyFuelCostWLTP = yearlyFuelCostWLTP;
			return this;
		}
		public Builder withYearlyKilometers(MeasuredFloat yearlyKilometers) {
			this.yearlyKilometers = yearlyKilometers;
			return this;
		}
		public Builder withYearlyTax(MeasuredFloat yearlyTax) {
			this.yearlyTax = yearlyTax;
			return this;
		}

		public RawGermanEnergyEfficiency build() {
			RawGermanEnergyEfficiency _object = new RawGermanEnergyEfficiency();
			_object.setElectricityCostPerUnit(electricityCostPerUnit);
			_object.setElectricityTaxFactor(electricityTaxFactor);
			_object.setEnergyEfficiencyClass(energyEfficiencyClass);
			_object.setExemptionLimit(exemptionLimit);
			_object.setFuelCostPerUnit(fuelCostPerUnit);
			_object.setFuelTaxFactor(fuelTaxFactor);
			_object.setYearlyElectricityCostNEDC(yearlyElectricityCostNEDC);
			_object.setYearlyElectricityCostWLTP(yearlyElectricityCostWLTP);
			_object.setYearlyFuelCostNEDC(yearlyFuelCostNEDC);
			_object.setYearlyFuelCostWLTP(yearlyFuelCostWLTP);
			_object.setYearlyKilometers(yearlyKilometers);
			_object.setYearlyTax(yearlyTax);
			_object.set__typename("RawGermanEnergyEfficiency");
			return _object;
		}
	}
}
