/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import cn.zy.client.util.CustomJacksonDeserializers;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("VehicleStateWheels")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class VehicleStateWheels 
	implements Wheels, Equipment{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public VehicleStateWheels(){
		// No action
	}

	@JsonProperty("previewImageKey")
	@GraphQLScalar(fieldName = "previewImageKey", graphQLTypeSimpleName = "String", javaClass = String.class)
	String previewImageKey;


	@JsonProperty("categoryKey")
	@GraphQLScalar(fieldName = "categoryKey", graphQLTypeSimpleName = "String", javaClass = String.class)
	String categoryKey;


	@JsonProperty("description")
	@GraphQLNonScalar(fieldName = "description", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	TranslatedText description;


	@JsonProperty("imageKeys")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLScalar(fieldName = "imageKeys", graphQLTypeSimpleName = "String", javaClass = String.class)
	List<String> imageKeys;


	@JsonProperty("name")
	@GraphQLNonScalar(fieldName = "name", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	TranslatedText name;


	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String optionCode;


	@JsonProperty("optionType")
	@GraphQLScalar(fieldName = "optionType", graphQLTypeSimpleName = "String", javaClass = String.class)
	String optionType;


	@JsonProperty("price")
	@GraphQLNonScalar(fieldName = "price", graphQLTypeSimpleName = "Price", javaClass = Price.class)
	Price price;


	@JsonProperty("selectedByCustomer")
	@GraphQLScalar(fieldName = "selectedByCustomer", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean selectedByCustomer;


	@JsonProperty("sortIndex")
	@GraphQLScalar(fieldName = "sortIndex", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer sortIndex;


	@JsonProperty("tags")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipmentTag.class)
	@GraphQLNonScalar(fieldName = "tags", graphQLTypeSimpleName = "EquipmentTag", javaClass = EquipmentTag.class)
	List<EquipmentTag> tags;


	@JsonProperty("visibleForCustomers")
	@GraphQLScalar(fieldName = "visibleForCustomers", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean visibleForCustomers;


	@JsonProperty("category")
	@GraphQLNonScalar(fieldName = "category", graphQLTypeSimpleName = "VehicleStateEquipmentCategoryDetails", javaClass = VehicleStateEquipmentCategoryDetails.class)
	VehicleStateEquipmentCategoryDetails category;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;




	/**
	 */
	@Override
	public void setPreviewImageKey(String previewImageKey) {
		if (previewImageKey == null || previewImageKey instanceof String) {
			this.previewImageKey = (String) previewImageKey;
		} else {
			throw new IllegalArgumentException("The given previewImageKey should be an instance of java.lang.String, but is an instance of "
					+ previewImageKey.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public String getPreviewImageKey() {
		return previewImageKey;
	}


	/**
	 */
	@Override
	public void setCategoryKey(String categoryKey) {
		if (categoryKey == null || categoryKey instanceof String) {
			this.categoryKey = (String) categoryKey;
		} else {
			throw new IllegalArgumentException("The given categoryKey should be an instance of java.lang.String, but is an instance of "
					+ categoryKey.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public String getCategoryKey() {
		return categoryKey;
	}


	/**
	 */
	@Override
	public void setDescription(TranslatedText description) {
		if (description == null || description instanceof TranslatedText) {
			this.description = (TranslatedText) description;
		} else {
			throw new IllegalArgumentException("The given description should be an instance of cn.zy.client.TranslatedText, but is an instance of "
					+ description.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public TranslatedText getDescription() {
		return description;
	}


	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public void setImageKeys(List<String> imageKeys) {
		if (imageKeys == null || imageKeys instanceof List) {
			this.imageKeys = (List<String>) (Object) imageKeys;
		} else {
			throw new IllegalArgumentException("The given imageKeys should be an instance of List<java.lang.String>, but is an instance of "
					+ imageKeys.getClass().getName());
		}
	}
 

 	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<String> getImageKeys() {
		return (List<String>) (Object) imageKeys;
	}

	/**
	 */
	public List<String> getImageKeysString() {
		return imageKeys;
	}


	/**
	 */
	@Override
	public void setName(TranslatedText name) {
		if (name == null || name instanceof TranslatedText) {
			this.name = (TranslatedText) name;
		} else {
			throw new IllegalArgumentException("The given name should be an instance of cn.zy.client.TranslatedText, but is an instance of "
					+ name.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public TranslatedText getName() {
		return name;
	}


	/**
	 */
	@Override
	public void setOptionCode(String optionCode) {
		if (optionCode == null || optionCode instanceof String) {
			this.optionCode = (String) optionCode;
		} else {
			throw new IllegalArgumentException("The given optionCode should be an instance of java.lang.String, but is an instance of "
					+ optionCode.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public String getOptionCode() {
		return optionCode;
	}


	/**
	 */
	@Override
	public void setOptionType(String optionType) {
		if (optionType == null || optionType instanceof String) {
			this.optionType = (String) optionType;
		} else {
			throw new IllegalArgumentException("The given optionType should be an instance of java.lang.String, but is an instance of "
					+ optionType.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public String getOptionType() {
		return optionType;
	}


	/**
	 */
	@Override
	public void setPrice(Price price) {
		if (price == null || price instanceof Price) {
			this.price = (Price) price;
		} else {
			throw new IllegalArgumentException("The given price should be an instance of cn.zy.client.Price, but is an instance of "
					+ price.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public Price getPrice() {
		return price;
	}


	/**
	 */
	@Override
	public void setSelectedByCustomer(Boolean selectedByCustomer) {
		if (selectedByCustomer == null || selectedByCustomer instanceof Boolean) {
			this.selectedByCustomer = (Boolean) selectedByCustomer;
		} else {
			throw new IllegalArgumentException("The given selectedByCustomer should be an instance of java.lang.Boolean, but is an instance of "
					+ selectedByCustomer.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public Boolean getSelectedByCustomer() {
		return selectedByCustomer;
	}


	/**
	 */
	@Override
	public void setSortIndex(Integer sortIndex) {
		if (sortIndex == null || sortIndex instanceof Integer) {
			this.sortIndex = (Integer) sortIndex;
		} else {
			throw new IllegalArgumentException("The given sortIndex should be an instance of java.lang.Integer, but is an instance of "
					+ sortIndex.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public Integer getSortIndex() {
		return sortIndex;
	}


	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public void setTags(List<EquipmentTag> tags) {
		if (tags == null || tags instanceof List) {
			this.tags = (List<EquipmentTag>) (Object) tags;
		} else {
			throw new IllegalArgumentException("The given tags should be an instance of List<cn.zy.client.EquipmentTag>, but is an instance of "
					+ tags.getClass().getName());
		}
	}
 

 	/**
	 */
	@Override
	@SuppressWarnings("unchecked")
	public List<EquipmentTag> getTags() {
		return (List<EquipmentTag>) (Object) tags;
	}

	/**
	 */
	public List<EquipmentTag> getTagsEquipmentTag() {
		return tags;
	}


	/**
	 */
	@Override
	public void setVisibleForCustomers(Boolean visibleForCustomers) {
		if (visibleForCustomers == null || visibleForCustomers instanceof Boolean) {
			this.visibleForCustomers = (Boolean) visibleForCustomers;
		} else {
			throw new IllegalArgumentException("The given visibleForCustomers should be an instance of java.lang.Boolean, but is an instance of "
					+ visibleForCustomers.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public Boolean getVisibleForCustomers() {
		return visibleForCustomers;
	}


	/**
	 */
	@Override
	public void setCategory(EquipmentCategoryDetails category) {
		if (category == null || category instanceof VehicleStateEquipmentCategoryDetails) {
			this.category = (VehicleStateEquipmentCategoryDetails) category;
		} else {
			throw new IllegalArgumentException("The given category should be an instance of cn.zy.client.VehicleStateEquipmentCategoryDetails, but is an instance of "
					+ category.getClass().getName());
		}
	}
 

	/** 
	 * As the type declared in the class is not inherited from one of the implemented interfaces, we need a dedicated setter.
	 * 
	 * @param
	 */
	public void setCategory(VehicleStateEquipmentCategoryDetails category) {
		this.category = category;
	}

	/**
	 */
	@Override
	public VehicleStateEquipmentCategoryDetails getCategory() {
		return category;
	}


	/**
	 */
	@Override
	public void set__typename(String __typename) {
		if (__typename == null || __typename instanceof String) {
			this.__typename = (String) __typename;
		} else {
			throw new IllegalArgumentException("The given __typename should be an instance of java.lang.String, but is an instance of "
					+ __typename.getClass().getName());
		}
	}
 

	/**
	 */
	@Override
	public String get__typename() {
		return __typename;
	}

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "VehicleStateWheels {"
				+ "previewImageKey: " + previewImageKey
				+ ", "
				+ "categoryKey: " + categoryKey
				+ ", "
				+ "description: " + description
				+ ", "
				+ "imageKeys: " + imageKeys
				+ ", "
				+ "name: " + name
				+ ", "
				+ "optionCode: " + optionCode
				+ ", "
				+ "optionType: " + optionType
				+ ", "
				+ "price: " + price
				+ ", "
				+ "selectedByCustomer: " + selectedByCustomer
				+ ", "
				+ "sortIndex: " + sortIndex
				+ ", "
				+ "tags: " + tags
				+ ", "
				+ "visibleForCustomers: " + visibleForCustomers
				+ ", "
				+ "category: " + category
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private String previewImageKey;
		private String categoryKey;
		private TranslatedText description;
		private List<String> imageKeys;
		private TranslatedText name;
		private String optionCode;
		private String optionType;
		private Price price;
		private Boolean selectedByCustomer;
		private Integer sortIndex;
		private List<EquipmentTag> tags;
		private Boolean visibleForCustomers;
		private VehicleStateEquipmentCategoryDetails category;

		public Builder withPreviewImageKey(String previewImageKey) {
			this.previewImageKey = previewImageKey;
			return this;
		}
		public Builder withCategoryKey(String categoryKey) {
			this.categoryKey = categoryKey;
			return this;
		}
		public Builder withDescription(TranslatedText description) {
			this.description = description;
			return this;
		}
		public Builder withImageKeys(List<String> imageKeys) {
			this.imageKeys = imageKeys;
			return this;
		}
		public Builder withName(TranslatedText name) {
			this.name = name;
			return this;
		}
		public Builder withOptionCode(String optionCode) {
			this.optionCode = optionCode;
			return this;
		}
		public Builder withOptionType(String optionType) {
			this.optionType = optionType;
			return this;
		}
		public Builder withPrice(Price price) {
			this.price = price;
			return this;
		}
		public Builder withSelectedByCustomer(Boolean selectedByCustomer) {
			this.selectedByCustomer = selectedByCustomer;
			return this;
		}
		public Builder withSortIndex(Integer sortIndex) {
			this.sortIndex = sortIndex;
			return this;
		}
		public Builder withTags(List<EquipmentTag> tags) {
			this.tags = tags;
			return this;
		}
		public Builder withVisibleForCustomers(Boolean visibleForCustomers) {
			this.visibleForCustomers = visibleForCustomers;
			return this;
		}
		public Builder withCategory(VehicleStateEquipmentCategoryDetails category) {
			this.category = category;
			return this;
		}

		public VehicleStateWheels build() {
			VehicleStateWheels _object = new VehicleStateWheels();
			_object.setPreviewImageKey(previewImageKey);
			_object.setCategoryKey(categoryKey);
			_object.setDescription(description);
			_object.setImageKeys(imageKeys);
			_object.setName(name);
			_object.setOptionCode(optionCode);
			_object.setOptionType(optionType);
			_object.setPrice(price);
			_object.setSelectedByCustomer(selectedByCustomer);
			_object.setSortIndex(sortIndex);
			_object.setTags(tags);
			_object.setVisibleForCustomers(visibleForCustomers);
			_object.setCategory(category);
			_object.set__typename("VehicleStateWheels");
			return _object;
		}
	}
}
