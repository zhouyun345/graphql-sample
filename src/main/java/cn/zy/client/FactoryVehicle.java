/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("FactoryVehicle")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class FactoryVehicle 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public FactoryVehicle(){
		// No action
	}

	@JsonProperty("configuratorImages")
	@GraphQLNonScalar(fieldName = "configuratorImages", graphQLTypeSimpleName = "FactoryVehicleConfiguratorImages", javaClass = FactoryVehicleConfiguratorImages.class)
	FactoryVehicleConfiguratorImages configuratorImages;


	@JsonProperty("energyEfficiency")
	@GraphQLNonScalar(fieldName = "energyEfficiency", graphQLTypeSimpleName = "EnergyEfficiency", javaClass = EnergyEfficiency.class)
	EnergyEfficiency energyEfficiency;


	@JsonProperty("equipmentInformation")
	@GraphQLNonScalar(fieldName = "equipmentInformation", graphQLTypeSimpleName = "FactoryVehicleEquipmentInformation", javaClass = FactoryVehicleEquipmentInformation.class)
	FactoryVehicleEquipmentInformation equipmentInformation;


	@JsonProperty("exteriorColor")
	@GraphQLNonScalar(fieldName = "exteriorColor", graphQLTypeSimpleName = "FactoryVehicleExteriorColor", javaClass = FactoryVehicleExteriorColor.class)
	FactoryVehicleExteriorColor exteriorColor;


	@JsonProperty("interior")
	@GraphQLNonScalar(fieldName = "interior", graphQLTypeSimpleName = "FactoryVehicleInterior", javaClass = FactoryVehicleInterior.class)
	FactoryVehicleInterior interior;


	@JsonProperty("metaData")
	@GraphQLNonScalar(fieldName = "metaData", graphQLTypeSimpleName = "FactoryVehicleMetaData", javaClass = FactoryVehicleMetaData.class)
	FactoryVehicleMetaData metaData;


	@JsonProperty("modelInformation")
	@GraphQLNonScalar(fieldName = "modelInformation", graphQLTypeSimpleName = "ModelInformation", javaClass = ModelInformation.class)
	ModelInformation modelInformation;


	@JsonProperty("modelYear")
	@GraphQLScalar(fieldName = "modelYear", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer modelYear;


	@JsonProperty("orderTypeBasicInformation")
	@GraphQLNonScalar(fieldName = "orderTypeBasicInformation", graphQLTypeSimpleName = "OrderTypeBasicInformation", javaClass = OrderTypeBasicInformation.class)
	OrderTypeBasicInformation orderTypeBasicInformation;


	@JsonProperty("orderTypeCode")
	@GraphQLScalar(fieldName = "orderTypeCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String orderTypeCode;


	@JsonProperty("rating")
	@GraphQLNonScalar(fieldName = "rating", graphQLTypeSimpleName = "Rating", javaClass = Rating.class)
	Rating rating;


	@JsonProperty("roofColor")
	@GraphQLNonScalar(fieldName = "roofColor", graphQLTypeSimpleName = "FactoryVehicleRoofColor", javaClass = FactoryVehicleRoofColor.class)
	FactoryVehicleRoofColor roofColor;


	@JsonProperty("salesArea")
	@GraphQLNonScalar(fieldName = "salesArea", graphQLTypeSimpleName = "SalesArea", javaClass = SalesArea.class)
	SalesArea salesArea;


	@JsonProperty("standardEquipment")
	@GraphQLNonScalar(fieldName = "standardEquipment", graphQLTypeSimpleName = "StandardEquipment", javaClass = StandardEquipment.class)
	StandardEquipment standardEquipment;


	@JsonProperty("technicalData")
	@GraphQLNonScalar(fieldName = "technicalData", graphQLTypeSimpleName = "TechnicalData", javaClass = TechnicalData.class)
	TechnicalData technicalData;


	@JsonProperty("transmission")
	@GraphQLNonScalar(fieldName = "transmission", graphQLTypeSimpleName = "TranslatedTransmission", javaClass = TranslatedTransmission.class)
	TranslatedTransmission transmission;


	@JsonProperty("vehicleBasicData")
	@GraphQLNonScalar(fieldName = "vehicleBasicData", graphQLTypeSimpleName = "VehicleBasicData", javaClass = VehicleBasicData.class)
	VehicleBasicData vehicleBasicData;


	@JsonProperty("vin")
	@GraphQLScalar(fieldName = "vin", graphQLTypeSimpleName = "String", javaClass = String.class)
	String vin;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setConfiguratorImages(FactoryVehicleConfiguratorImages configuratorImages) {
		this.configuratorImages = configuratorImages;
	}

	public FactoryVehicleConfiguratorImages getConfiguratorImages() {
		return configuratorImages;
	}
		

	public void setEnergyEfficiency(EnergyEfficiency energyEfficiency) {
		this.energyEfficiency = energyEfficiency;
	}

	public EnergyEfficiency getEnergyEfficiency() {
		return energyEfficiency;
	}
		

	public void setEquipmentInformation(FactoryVehicleEquipmentInformation equipmentInformation) {
		this.equipmentInformation = equipmentInformation;
	}

	public FactoryVehicleEquipmentInformation getEquipmentInformation() {
		return equipmentInformation;
	}
		

	public void setExteriorColor(FactoryVehicleExteriorColor exteriorColor) {
		this.exteriorColor = exteriorColor;
	}

	public FactoryVehicleExteriorColor getExteriorColor() {
		return exteriorColor;
	}
		

	public void setInterior(FactoryVehicleInterior interior) {
		this.interior = interior;
	}

	public FactoryVehicleInterior getInterior() {
		return interior;
	}
		

	public void setMetaData(FactoryVehicleMetaData metaData) {
		this.metaData = metaData;
	}

	public FactoryVehicleMetaData getMetaData() {
		return metaData;
	}
		

	public void setModelInformation(ModelInformation modelInformation) {
		this.modelInformation = modelInformation;
	}

	public ModelInformation getModelInformation() {
		return modelInformation;
	}
		

	public void setModelYear(Integer modelYear) {
		this.modelYear = modelYear;
	}

	public Integer getModelYear() {
		return modelYear;
	}
		

	public void setOrderTypeBasicInformation(OrderTypeBasicInformation orderTypeBasicInformation) {
		this.orderTypeBasicInformation = orderTypeBasicInformation;
	}

	public OrderTypeBasicInformation getOrderTypeBasicInformation() {
		return orderTypeBasicInformation;
	}
		

	public void setOrderTypeCode(String orderTypeCode) {
		this.orderTypeCode = orderTypeCode;
	}

	public String getOrderTypeCode() {
		return orderTypeCode;
	}
		

	public void setRating(Rating rating) {
		this.rating = rating;
	}

	public Rating getRating() {
		return rating;
	}
		

	public void setRoofColor(FactoryVehicleRoofColor roofColor) {
		this.roofColor = roofColor;
	}

	public FactoryVehicleRoofColor getRoofColor() {
		return roofColor;
	}
		

	public void setSalesArea(SalesArea salesArea) {
		this.salesArea = salesArea;
	}

	public SalesArea getSalesArea() {
		return salesArea;
	}
		

	public void setStandardEquipment(StandardEquipment standardEquipment) {
		this.standardEquipment = standardEquipment;
	}

	public StandardEquipment getStandardEquipment() {
		return standardEquipment;
	}
		

	public void setTechnicalData(TechnicalData technicalData) {
		this.technicalData = technicalData;
	}

	public TechnicalData getTechnicalData() {
		return technicalData;
	}
		

	public void setTransmission(TranslatedTransmission transmission) {
		this.transmission = transmission;
	}

	public TranslatedTransmission getTransmission() {
		return transmission;
	}
		

	public void setVehicleBasicData(VehicleBasicData vehicleBasicData) {
		this.vehicleBasicData = vehicleBasicData;
	}

	public VehicleBasicData getVehicleBasicData() {
		return vehicleBasicData;
	}
		

	public void setVin(String vin) {
		this.vin = vin;
	}

	public String getVin() {
		return vin;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "FactoryVehicle {"
				+ "configuratorImages: " + configuratorImages
				+ ", "
				+ "energyEfficiency: " + energyEfficiency
				+ ", "
				+ "equipmentInformation: " + equipmentInformation
				+ ", "
				+ "exteriorColor: " + exteriorColor
				+ ", "
				+ "interior: " + interior
				+ ", "
				+ "metaData: " + metaData
				+ ", "
				+ "modelInformation: " + modelInformation
				+ ", "
				+ "modelYear: " + modelYear
				+ ", "
				+ "orderTypeBasicInformation: " + orderTypeBasicInformation
				+ ", "
				+ "orderTypeCode: " + orderTypeCode
				+ ", "
				+ "rating: " + rating
				+ ", "
				+ "roofColor: " + roofColor
				+ ", "
				+ "salesArea: " + salesArea
				+ ", "
				+ "standardEquipment: " + standardEquipment
				+ ", "
				+ "technicalData: " + technicalData
				+ ", "
				+ "transmission: " + transmission
				+ ", "
				+ "vehicleBasicData: " + vehicleBasicData
				+ ", "
				+ "vin: " + vin
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private FactoryVehicleConfiguratorImages configuratorImages;
		private EnergyEfficiency energyEfficiency;
		private FactoryVehicleEquipmentInformation equipmentInformation;
		private FactoryVehicleExteriorColor exteriorColor;
		private FactoryVehicleInterior interior;
		private FactoryVehicleMetaData metaData;
		private ModelInformation modelInformation;
		private Integer modelYear;
		private OrderTypeBasicInformation orderTypeBasicInformation;
		private String orderTypeCode;
		private Rating rating;
		private FactoryVehicleRoofColor roofColor;
		private SalesArea salesArea;
		private StandardEquipment standardEquipment;
		private TechnicalData technicalData;
		private TranslatedTransmission transmission;
		private VehicleBasicData vehicleBasicData;
		private String vin;

		public Builder withConfiguratorImages(FactoryVehicleConfiguratorImages configuratorImages) {
			this.configuratorImages = configuratorImages;
			return this;
		}
		public Builder withEnergyEfficiency(EnergyEfficiency energyEfficiency) {
			this.energyEfficiency = energyEfficiency;
			return this;
		}
		public Builder withEquipmentInformation(FactoryVehicleEquipmentInformation equipmentInformation) {
			this.equipmentInformation = equipmentInformation;
			return this;
		}
		public Builder withExteriorColor(FactoryVehicleExteriorColor exteriorColor) {
			this.exteriorColor = exteriorColor;
			return this;
		}
		public Builder withInterior(FactoryVehicleInterior interior) {
			this.interior = interior;
			return this;
		}
		public Builder withMetaData(FactoryVehicleMetaData metaData) {
			this.metaData = metaData;
			return this;
		}
		public Builder withModelInformation(ModelInformation modelInformation) {
			this.modelInformation = modelInformation;
			return this;
		}
		public Builder withModelYear(Integer modelYear) {
			this.modelYear = modelYear;
			return this;
		}
		public Builder withOrderTypeBasicInformation(OrderTypeBasicInformation orderTypeBasicInformation) {
			this.orderTypeBasicInformation = orderTypeBasicInformation;
			return this;
		}
		public Builder withOrderTypeCode(String orderTypeCode) {
			this.orderTypeCode = orderTypeCode;
			return this;
		}
		public Builder withRating(Rating rating) {
			this.rating = rating;
			return this;
		}
		public Builder withRoofColor(FactoryVehicleRoofColor roofColor) {
			this.roofColor = roofColor;
			return this;
		}
		public Builder withSalesArea(SalesArea salesArea) {
			this.salesArea = salesArea;
			return this;
		}
		public Builder withStandardEquipment(StandardEquipment standardEquipment) {
			this.standardEquipment = standardEquipment;
			return this;
		}
		public Builder withTechnicalData(TechnicalData technicalData) {
			this.technicalData = technicalData;
			return this;
		}
		public Builder withTransmission(TranslatedTransmission transmission) {
			this.transmission = transmission;
			return this;
		}
		public Builder withVehicleBasicData(VehicleBasicData vehicleBasicData) {
			this.vehicleBasicData = vehicleBasicData;
			return this;
		}
		public Builder withVin(String vin) {
			this.vin = vin;
			return this;
		}

		public FactoryVehicle build() {
			FactoryVehicle _object = new FactoryVehicle();
			_object.setConfiguratorImages(configuratorImages);
			_object.setEnergyEfficiency(energyEfficiency);
			_object.setEquipmentInformation(equipmentInformation);
			_object.setExteriorColor(exteriorColor);
			_object.setInterior(interior);
			_object.setMetaData(metaData);
			_object.setModelInformation(modelInformation);
			_object.setModelYear(modelYear);
			_object.setOrderTypeBasicInformation(orderTypeBasicInformation);
			_object.setOrderTypeCode(orderTypeCode);
			_object.setRating(rating);
			_object.setRoofColor(roofColor);
			_object.setSalesArea(salesArea);
			_object.setStandardEquipment(standardEquipment);
			_object.setTechnicalData(technicalData);
			_object.setTransmission(transmission);
			_object.setVehicleBasicData(vehicleBasicData);
			_object.setVin(vin);
			_object.set__typename("FactoryVehicle");
			return _object;
		}
	}
}
