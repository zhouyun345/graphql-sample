/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("GeneralConsumptionEmission")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class GeneralConsumptionEmission 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public GeneralConsumptionEmission(){
		// No action
	}

	@JsonProperty("chSpecifics")
	@GraphQLNonScalar(fieldName = "chSpecifics", graphQLTypeSimpleName = "GeneralChSpecificsConsumption", javaClass = GeneralChSpecificsConsumption.class)
	GeneralChSpecificsConsumption chSpecifics;


	@JsonProperty("co2Emissions")
	@GraphQLNonScalar(fieldName = "co2Emissions", graphQLTypeSimpleName = "EmissionTechnicalDataItem", javaClass = EmissionTechnicalDataItem.class)
	EmissionTechnicalDataItem co2Emissions;


	@JsonProperty("electricityConsumption")
	@GraphQLNonScalar(fieldName = "electricityConsumption", graphQLTypeSimpleName = "GeneralElectricityConsumption", javaClass = GeneralElectricityConsumption.class)
	GeneralElectricityConsumption electricityConsumption;


	@JsonProperty("fuelConsumption")
	@GraphQLNonScalar(fieldName = "fuelConsumption", graphQLTypeSimpleName = "GeneralFuelConsumption", javaClass = GeneralFuelConsumption.class)
	GeneralFuelConsumption fuelConsumption;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setChSpecifics(GeneralChSpecificsConsumption chSpecifics) {
		this.chSpecifics = chSpecifics;
	}

	public GeneralChSpecificsConsumption getChSpecifics() {
		return chSpecifics;
	}
		

	public void setCo2Emissions(EmissionTechnicalDataItem co2Emissions) {
		this.co2Emissions = co2Emissions;
	}

	public EmissionTechnicalDataItem getCo2Emissions() {
		return co2Emissions;
	}
		

	public void setElectricityConsumption(GeneralElectricityConsumption electricityConsumption) {
		this.electricityConsumption = electricityConsumption;
	}

	public GeneralElectricityConsumption getElectricityConsumption() {
		return electricityConsumption;
	}
		

	public void setFuelConsumption(GeneralFuelConsumption fuelConsumption) {
		this.fuelConsumption = fuelConsumption;
	}

	public GeneralFuelConsumption getFuelConsumption() {
		return fuelConsumption;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "GeneralConsumptionEmission {"
				+ "chSpecifics: " + chSpecifics
				+ ", "
				+ "co2Emissions: " + co2Emissions
				+ ", "
				+ "electricityConsumption: " + electricityConsumption
				+ ", "
				+ "fuelConsumption: " + fuelConsumption
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private GeneralChSpecificsConsumption chSpecifics;
		private EmissionTechnicalDataItem co2Emissions;
		private GeneralElectricityConsumption electricityConsumption;
		private GeneralFuelConsumption fuelConsumption;

		public Builder withChSpecifics(GeneralChSpecificsConsumption chSpecifics) {
			this.chSpecifics = chSpecifics;
			return this;
		}
		public Builder withCo2Emissions(EmissionTechnicalDataItem co2Emissions) {
			this.co2Emissions = co2Emissions;
			return this;
		}
		public Builder withElectricityConsumption(GeneralElectricityConsumption electricityConsumption) {
			this.electricityConsumption = electricityConsumption;
			return this;
		}
		public Builder withFuelConsumption(GeneralFuelConsumption fuelConsumption) {
			this.fuelConsumption = fuelConsumption;
			return this;
		}

		public GeneralConsumptionEmission build() {
			GeneralConsumptionEmission _object = new GeneralConsumptionEmission();
			_object.setChSpecifics(chSpecifics);
			_object.setCo2Emissions(co2Emissions);
			_object.setElectricityConsumption(electricityConsumption);
			_object.setFuelConsumption(fuelConsumption);
			_object.set__typename("GeneralConsumptionEmission");
			return _object;
		}
	}
}
