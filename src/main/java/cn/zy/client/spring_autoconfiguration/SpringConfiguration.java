 /** Generated by the default template from graphql-java-generator */
package cn.zy.client.spring_autoconfiguration;

import com.graphql_java_generator.client.GraphQLConfiguration;
import com.graphql_java_generator.client.OAuthTokenExtractor;
import com.graphql_java_generator.client.RequestExecution;
import com.graphql_java_generator.client.RequestExecutionSpringReactiveImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.web.codec.CodecCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.oauth2.client.web.reactive.function.client.ServerOAuth2AuthorizedClientExchangeFilterFunction;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.socket.client.WebSocketClient;
import reactor.netty.http.client.HttpClient;

/**
 * This Spring {@link Configuration} class defines the Spring Bean for this GraphQL schema.
 * 
 * @author etienne-sf
 */
@Configuration("springConfiguration") // The name of this bean will be springConfiguration
@ComponentScan("cn.zy.client.util")
@SuppressWarnings("unused")
public class SpringConfiguration {

	@Value(value = "${graphql.endpoint.url}")
	private String graphqlEndpointUrl;

	@Value("${graphql.endpoint.subscriptionUrl:${graphql.endpoint.url}}")
	@Deprecated
	private String graphqlEndpointSubscriptionUrl;

	/**
	 * This beans defines the GraphQL endpoint for the current GraphQL schema, as a {@link String}. The <I>application.properties</I> 
	 * must define the GraphQL URL endpoint in the <I>graphql.endpoint.url</I> property.
	 * 
	 * 
	 * @return Returns the value of the <I>graphql.endpoint.url</I> application property.
	 * @see https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config
	 */
	@Bean
	@ConditionalOnMissingBean(name = "graphqlEndpoint")
	String graphqlEndpoint() {
		return graphqlEndpointUrl;
	}

	/**
	 * This beans defines the GraphQL endpoint for subscriptions for the  server, as a {@link String}. If
	 * null, then the {@link #graphqlEndpoint()} url is used, which is the default.
	 * 
	 * @return Returns the value of the <I>graphql.endpoint.subscriptionUrl</I> application property.
	 * @see https://docs.spring.io/spring-boot/docs/2.3.3.RELEASE/reference/html/spring-boot-features.html#boot-features-external-config
	 */
	@Bean
	@ConditionalOnMissingBean(name = "graphqlSubscriptionEndpoint")
	@Deprecated
	String graphqlSubscriptionEndpoint() {
		return graphqlEndpointSubscriptionUrl;
	}

	/**
	 * The Spring reactive {@link WebClient} that will execute the HTTP requests for GraphQL queries and mutations.<BR/>
	 * This bean is only created if no such bean already exists
	 */
	@Bean
	@ConditionalOnMissingBean(name = "webClient")
	public WebClient webClient(String graphqlEndpoint,
			@Autowired(required = false) CodecCustomizer defaultCodecCustomizer,
			@Autowired(required = false) @Qualifier("httpClient") HttpClient httpClient,
			@Autowired(required = false) @Qualifier("serverOAuth2AuthorizedClientExchangeFilterFunction") ServerOAuth2AuthorizedClientExchangeFilterFunction serverOAuth2AuthorizedClientExchangeFilterFunction) {
		return GraphQLConfiguration.getWebClient(graphqlEndpoint, defaultCodecCustomizer,
				httpClient, serverOAuth2AuthorizedClientExchangeFilterFunction);
	}



	/**
	 * The Spring reactive {@link WebSocketClient} web socket client for the  GraphQL schema, that will
	 * execute HTTP requests to build the web sockets, for GraphQL subscriptions.<BR/>
	 * This is mandatory if the application latter calls subscription. It may be null otherwise.
	 */
	@Bean
	@ConditionalOnMissingBean(name = "webSocketClient")
	public WebSocketClient webSocketClient(
			@Autowired(required = false) @Qualifier("httpClient") HttpClient httpClient) {
		return GraphQLConfiguration.getWebSocketClient(httpClient);
	}

	@Bean
	@ConditionalOnMissingBean
	OAuthTokenExtractor oAuthTokenExtractor(
			@Autowired(required = false)
			@Qualifier("serverOAuth2AuthorizedClientExchangeFilterFunction") 
				ServerOAuth2AuthorizedClientExchangeFilterFunction serverOAuth2AuthorizedClientExchangeFilterFunction) {
		if (serverOAuth2AuthorizedClientExchangeFilterFunction == null) 
			return null;
		else
			return new OAuthTokenExtractor(serverOAuth2AuthorizedClientExchangeFilterFunction);
	}

	/**
	 * Creates the {@link RequestExecution} for this schema.
	 * 
	 * @param graphqlEndpoint
	 * @param graphqlSubscriptionEndpoint
	 * @param webClient
	 * @param webSocketClient
	 * @param serverOAuth2AuthorizedClientExchangeFilterFunction
	 * @param oAuthTokenExtractor
	 * @return
	 */
	@Bean
	@ConditionalOnMissingBean(name = "requestExecution")
	public RequestExecution requestExecution(String graphqlEndpoint, //
			@Autowired(required = false) @Qualifier("graphqlSubscriptionEndpoint") String graphqlSubscriptionEndpoint, //
			@Autowired(required = false) @Qualifier("webClient") WebClient webClient, //
			@Autowired(required = false) @Qualifier("webSocketClient") WebSocketClient webSocketClient,
			@Autowired(required = false) @Qualifier("serverOAuth2AuthorizedClientExchangeFilterFunction") ServerOAuth2AuthorizedClientExchangeFilterFunction serverOAuth2AuthorizedClientExchangeFilterFunction,
			@Autowired(required = false) @Qualifier("oAuthTokenExtractor") OAuthTokenExtractor oAuthTokenExtractor)
	{
		return new RequestExecutionSpringReactiveImpl(graphqlEndpoint, graphqlSubscriptionEndpoint,
				webClient, webSocketClient, serverOAuth2AuthorizedClientExchangeFilterFunction,
				oAuthTokenExtractor);
	}

	/**
	 * Creates the {@link GraphQLConfiguration} for this GraphQL schema
	 * 
	 * @param queryExecutor
	 * @return
	 */
	@Bean
	@ConditionalOnMissingBean(name = "graphQLConfiguration")
	GraphQLConfiguration graphQLConfiguration(RequestExecution requestExecution) {
		return new GraphQLConfiguration(requestExecution);
	}
}
