/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import cn.zy.client.util.CustomJacksonDeserializers;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInputParameters;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
@JsonSubTypes({ @Type(value = FactoryVehicleEquipmentPackage.class, name = "FactoryVehicleEquipmentPackage"), @Type(value = VehicleStateEquipmentPackage.class, name = "VehicleStateEquipmentPackage") })
@GraphQLInterfaceType("EquipmentPackage")
@SuppressWarnings("unused")
public interface EquipmentPackage  {

	@JsonProperty("contents")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipmentPackageContent.class)
	@GraphQLNonScalar(fieldName = "contents", graphQLTypeSimpleName = "EquipmentPackageContent", javaClass = EquipmentPackageContent.class)
	public void setContents(List<EquipmentPackageContent> contents);

	@JsonProperty("contents")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipmentPackageContent.class)
	@GraphQLNonScalar(fieldName = "contents", graphQLTypeSimpleName = "EquipmentPackageContent", javaClass = EquipmentPackageContent.class)
	public List<EquipmentPackageContent> getContents();

	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setOptionCode(String optionCode);

	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getOptionCode();

	@JsonProperty("equipment")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipment.class)
	@GraphQLInputParameters(names = {"filter"}, types = {"VehicleStateEquipmentOptionsFilterInput"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "equipment", graphQLTypeSimpleName = "Equipment", javaClass = Equipment.class)
	public void setEquipment(List<Equipment> equipment);

	@JsonProperty("equipment")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipment.class)
	@GraphQLInputParameters(names = {"filter"}, types = {"VehicleStateEquipmentOptionsFilterInput"}, mandatories = {false}, listDepths = {0}, itemsMandatory = {false})
	@GraphQLNonScalar(fieldName = "equipment", graphQLTypeSimpleName = "Equipment", javaClass = Equipment.class)
	public List<Equipment> getEquipment();

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void set__typename(String __typename);

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String get__typename();

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue);

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias);

}
