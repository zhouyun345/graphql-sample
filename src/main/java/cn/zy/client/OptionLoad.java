/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("OptionLoad")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class OptionLoad 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public OptionLoad(){
		// No action
	}

	@JsonProperty("lowerBound")
	@GraphQLScalar(fieldName = "lowerBound", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer lowerBound;


	@JsonProperty("score")
	@GraphQLScalar(fieldName = "score", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer score;


	@JsonProperty("scoreClass")
	@GraphQLScalar(fieldName = "scoreClass", graphQLTypeSimpleName = "OptionsLoadScoreClass", javaClass = OptionsLoadScoreClass.class)
	OptionsLoadScoreClass scoreClass;


	@JsonProperty("upperBound")
	@GraphQLScalar(fieldName = "upperBound", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	Integer upperBound;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setLowerBound(Integer lowerBound) {
		this.lowerBound = lowerBound;
	}

	public Integer getLowerBound() {
		return lowerBound;
	}
		

	public void setScore(Integer score) {
		this.score = score;
	}

	public Integer getScore() {
		return score;
	}
		

	public void setScoreClass(OptionsLoadScoreClass scoreClass) {
		this.scoreClass = scoreClass;
	}

	public OptionsLoadScoreClass getScoreClass() {
		return scoreClass;
	}
		

	public void setUpperBound(Integer upperBound) {
		this.upperBound = upperBound;
	}

	public Integer getUpperBound() {
		return upperBound;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "OptionLoad {"
				+ "lowerBound: " + lowerBound
				+ ", "
				+ "score: " + score
				+ ", "
				+ "scoreClass: " + scoreClass
				+ ", "
				+ "upperBound: " + upperBound
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private Integer lowerBound;
		private Integer score;
		private OptionsLoadScoreClass scoreClass;
		private Integer upperBound;

		public Builder withLowerBound(Integer lowerBound) {
			this.lowerBound = lowerBound;
			return this;
		}
		public Builder withScore(Integer score) {
			this.score = score;
			return this;
		}
		public Builder withScoreClass(OptionsLoadScoreClass scoreClass) {
			this.scoreClass = scoreClass;
			return this;
		}
		public Builder withUpperBound(Integer upperBound) {
			this.upperBound = upperBound;
			return this;
		}

		public OptionLoad build() {
			OptionLoad _object = new OptionLoad();
			_object.setLowerBound(lowerBound);
			_object.setScore(score);
			_object.setScoreClass(scoreClass);
			_object.setUpperBound(upperBound);
			_object.set__typename("OptionLoad");
			return _object;
		}
	}
}
