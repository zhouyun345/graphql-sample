/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("ConsumptionEmission")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class ConsumptionEmission 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public ConsumptionEmission(){
		// No action
	}

	@JsonProperty("ece")
	@GraphQLNonScalar(fieldName = "ece", graphQLTypeSimpleName = "GeneralConsumptionEmission", javaClass = GeneralConsumptionEmission.class)
	GeneralConsumptionEmission ece;


	@JsonProperty("general")
	@GraphQLNonScalar(fieldName = "general", graphQLTypeSimpleName = "GeneralConsumptionEmission", javaClass = GeneralConsumptionEmission.class)
	GeneralConsumptionEmission general;


	@JsonProperty("marketing")
	@GraphQLNonScalar(fieldName = "marketing", graphQLTypeSimpleName = "MarketingConsumptionEmission", javaClass = MarketingConsumptionEmission.class)
	MarketingConsumptionEmission marketing;


	@JsonProperty("wltp")
	@GraphQLNonScalar(fieldName = "wltp", graphQLTypeSimpleName = "WltpConsumptionEmission", javaClass = WltpConsumptionEmission.class)
	WltpConsumptionEmission wltp;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setEce(GeneralConsumptionEmission ece) {
		this.ece = ece;
	}

	public GeneralConsumptionEmission getEce() {
		return ece;
	}
		

	public void setGeneral(GeneralConsumptionEmission general) {
		this.general = general;
	}

	public GeneralConsumptionEmission getGeneral() {
		return general;
	}
		

	public void setMarketing(MarketingConsumptionEmission marketing) {
		this.marketing = marketing;
	}

	public MarketingConsumptionEmission getMarketing() {
		return marketing;
	}
		

	public void setWltp(WltpConsumptionEmission wltp) {
		this.wltp = wltp;
	}

	public WltpConsumptionEmission getWltp() {
		return wltp;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "ConsumptionEmission {"
				+ "ece: " + ece
				+ ", "
				+ "general: " + general
				+ ", "
				+ "marketing: " + marketing
				+ ", "
				+ "wltp: " + wltp
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private GeneralConsumptionEmission ece;
		private GeneralConsumptionEmission general;
		private MarketingConsumptionEmission marketing;
		private WltpConsumptionEmission wltp;

		public Builder withEce(GeneralConsumptionEmission ece) {
			this.ece = ece;
			return this;
		}
		public Builder withGeneral(GeneralConsumptionEmission general) {
			this.general = general;
			return this;
		}
		public Builder withMarketing(MarketingConsumptionEmission marketing) {
			this.marketing = marketing;
			return this;
		}
		public Builder withWltp(WltpConsumptionEmission wltp) {
			this.wltp = wltp;
			return this;
		}

		public ConsumptionEmission build() {
			ConsumptionEmission _object = new ConsumptionEmission();
			_object.setEce(ece);
			_object.setGeneral(general);
			_object.setMarketing(marketing);
			_object.setWltp(wltp);
			_object.set__typename("ConsumptionEmission");
			return _object;
		}
	}
}
