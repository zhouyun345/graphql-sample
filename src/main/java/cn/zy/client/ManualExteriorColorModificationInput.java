/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("ManualExteriorColorModificationInput")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class ManualExteriorColorModificationInput 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public ManualExteriorColorModificationInput(){
		// No action
	}

	@JsonProperty("colorTagKey")
	@GraphQLScalar(fieldName = "colorTagKey", graphQLTypeSimpleName = "String", javaClass = String.class)
	String colorTagKey;


	@JsonProperty("exteriorColorType")
	@GraphQLScalar(fieldName = "exteriorColorType", graphQLTypeSimpleName = "ExteriorColorType", javaClass = ExteriorColorType.class)
	ExteriorColorType exteriorColorType;


	@JsonProperty("hexCode")
	@GraphQLScalar(fieldName = "hexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String hexCode;


	@JsonProperty("name")
	@GraphQLNonScalar(fieldName = "name", graphQLTypeSimpleName = "TranslatedTextInput", javaClass = TranslatedTextInput.class)
	TranslatedTextInput name;



	public void setColorTagKey(String colorTagKey) {
		this.colorTagKey = colorTagKey;
	}

	public String getColorTagKey() {
		return colorTagKey;
	}
		

	public void setExteriorColorType(ExteriorColorType exteriorColorType) {
		this.exteriorColorType = exteriorColorType;
	}

	public ExteriorColorType getExteriorColorType() {
		return exteriorColorType;
	}
		

	public void setHexCode(String hexCode) {
		this.hexCode = hexCode;
	}

	public String getHexCode() {
		return hexCode;
	}
		

	public void setName(TranslatedTextInput name) {
		this.name = name;
	}

	public TranslatedTextInput getName() {
		return name;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "ManualExteriorColorModificationInput {"
				+ "colorTagKey: " + colorTagKey
				+ ", "
				+ "exteriorColorType: " + exteriorColorType
				+ ", "
				+ "hexCode: " + hexCode
				+ ", "
				+ "name: " + name
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private String colorTagKey;
		private ExteriorColorType exteriorColorType;
		private String hexCode;
		private TranslatedTextInput name;

		public Builder withColorTagKey(String colorTagKey) {
			this.colorTagKey = colorTagKey;
			return this;
		}
		public Builder withExteriorColorType(ExteriorColorType exteriorColorType) {
			this.exteriorColorType = exteriorColorType;
			return this;
		}
		public Builder withHexCode(String hexCode) {
			this.hexCode = hexCode;
			return this;
		}
		public Builder withName(TranslatedTextInput name) {
			this.name = name;
			return this;
		}

		public ManualExteriorColorModificationInput build() {
			ManualExteriorColorModificationInput _object = new ManualExteriorColorModificationInput();
			_object.setColorTagKey(colorTagKey);
			_object.setExteriorColorType(exteriorColorType);
			_object.setHexCode(hexCode);
			_object.setName(name);
			return _object;
		}
	}
}
