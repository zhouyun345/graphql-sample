/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLObjectType;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLObjectType("InteriorColor")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class InteriorColor 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public InteriorColor(){
		// No action
	}

	@JsonProperty("cockpitColorHexCode")
	@GraphQLScalar(fieldName = "cockpitColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String cockpitColorHexCode;


	@JsonProperty("cockpitStitchingColorHexCode")
	@GraphQLScalar(fieldName = "cockpitStitchingColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String cockpitStitchingColorHexCode;


	@JsonProperty("colorTag")
	@GraphQLNonScalar(fieldName = "colorTag", graphQLTypeSimpleName = "ColorTag", javaClass = ColorTag.class)
	ColorTag colorTag;


	@JsonProperty("isCustomColor")
	@GraphQLScalar(fieldName = "isCustomColor", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	Boolean isCustomColor;


	@JsonProperty("seatColorHexCode")
	@GraphQLScalar(fieldName = "seatColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String seatColorHexCode;


	@JsonProperty("seatStitchingColorHexCode")
	@GraphQLScalar(fieldName = "seatStitchingColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String seatStitchingColorHexCode;


	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	String __typename;



	public void setCockpitColorHexCode(String cockpitColorHexCode) {
		this.cockpitColorHexCode = cockpitColorHexCode;
	}

	public String getCockpitColorHexCode() {
		return cockpitColorHexCode;
	}
		

	public void setCockpitStitchingColorHexCode(String cockpitStitchingColorHexCode) {
		this.cockpitStitchingColorHexCode = cockpitStitchingColorHexCode;
	}

	public String getCockpitStitchingColorHexCode() {
		return cockpitStitchingColorHexCode;
	}
		

	public void setColorTag(ColorTag colorTag) {
		this.colorTag = colorTag;
	}

	public ColorTag getColorTag() {
		return colorTag;
	}
		

	public void setIsCustomColor(Boolean isCustomColor) {
		this.isCustomColor = isCustomColor;
	}

	public Boolean getIsCustomColor() {
		return isCustomColor;
	}
		

	public void setSeatColorHexCode(String seatColorHexCode) {
		this.seatColorHexCode = seatColorHexCode;
	}

	public String getSeatColorHexCode() {
		return seatColorHexCode;
	}
		

	public void setSeatStitchingColorHexCode(String seatStitchingColorHexCode) {
		this.seatStitchingColorHexCode = seatStitchingColorHexCode;
	}

	public String getSeatStitchingColorHexCode() {
		return seatStitchingColorHexCode;
	}
		

	public void set__typename(String __typename) {
		this.__typename = __typename;
	}

	public String get__typename() {
		return __typename;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "InteriorColor {"
				+ "cockpitColorHexCode: " + cockpitColorHexCode
				+ ", "
				+ "cockpitStitchingColorHexCode: " + cockpitStitchingColorHexCode
				+ ", "
				+ "colorTag: " + colorTag
				+ ", "
				+ "isCustomColor: " + isCustomColor
				+ ", "
				+ "seatColorHexCode: " + seatColorHexCode
				+ ", "
				+ "seatStitchingColorHexCode: " + seatStitchingColorHexCode
				+ ", "
				+ "__typename: " + __typename
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private String cockpitColorHexCode;
		private String cockpitStitchingColorHexCode;
		private ColorTag colorTag;
		private Boolean isCustomColor;
		private String seatColorHexCode;
		private String seatStitchingColorHexCode;

		public Builder withCockpitColorHexCode(String cockpitColorHexCode) {
			this.cockpitColorHexCode = cockpitColorHexCode;
			return this;
		}
		public Builder withCockpitStitchingColorHexCode(String cockpitStitchingColorHexCode) {
			this.cockpitStitchingColorHexCode = cockpitStitchingColorHexCode;
			return this;
		}
		public Builder withColorTag(ColorTag colorTag) {
			this.colorTag = colorTag;
			return this;
		}
		public Builder withIsCustomColor(Boolean isCustomColor) {
			this.isCustomColor = isCustomColor;
			return this;
		}
		public Builder withSeatColorHexCode(String seatColorHexCode) {
			this.seatColorHexCode = seatColorHexCode;
			return this;
		}
		public Builder withSeatStitchingColorHexCode(String seatStitchingColorHexCode) {
			this.seatStitchingColorHexCode = seatStitchingColorHexCode;
			return this;
		}

		public InteriorColor build() {
			InteriorColor _object = new InteriorColor();
			_object.setCockpitColorHexCode(cockpitColorHexCode);
			_object.setCockpitStitchingColorHexCode(cockpitStitchingColorHexCode);
			_object.setColorTag(colorTag);
			_object.setIsCustomColor(isCustomColor);
			_object.setSeatColorHexCode(seatColorHexCode);
			_object.setSeatStitchingColorHexCode(seatStitchingColorHexCode);
			_object.set__typename("InteriorColor");
			return _object;
		}
	}
}
