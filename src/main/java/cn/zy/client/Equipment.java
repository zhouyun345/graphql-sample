/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import cn.zy.client.util.CustomJacksonDeserializers;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;
import java.util.List;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
@JsonSubTypes({ @Type(value = FactoryVehicleEquipment.class, name = "FactoryVehicleEquipment"), @Type(value = FactoryVehicleWheels.class, name = "FactoryVehicleWheels"), @Type(value = VehicleStateEquipment.class, name = "VehicleStateEquipment"), @Type(value = VehicleStateWheels.class, name = "VehicleStateWheels") })
@GraphQLInterfaceType("Equipment")
@SuppressWarnings("unused")
public interface Equipment  {

	@JsonProperty("categoryKey")
	@GraphQLScalar(fieldName = "categoryKey", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setCategoryKey(String categoryKey);

	@JsonProperty("categoryKey")
	@GraphQLScalar(fieldName = "categoryKey", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getCategoryKey();

	@JsonProperty("description")
	@GraphQLNonScalar(fieldName = "description", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public void setDescription(TranslatedText description);

	@JsonProperty("description")
	@GraphQLNonScalar(fieldName = "description", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public TranslatedText getDescription();

	@JsonProperty("imageKeys")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLScalar(fieldName = "imageKeys", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setImageKeys(List<String> imageKeys);

	@JsonProperty("imageKeys")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListString.class)
	@GraphQLScalar(fieldName = "imageKeys", graphQLTypeSimpleName = "String", javaClass = String.class)
	public List<String> getImageKeys();

	@JsonProperty("name")
	@GraphQLNonScalar(fieldName = "name", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public void setName(TranslatedText name);

	@JsonProperty("name")
	@GraphQLNonScalar(fieldName = "name", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public TranslatedText getName();

	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setOptionCode(String optionCode);

	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getOptionCode();

	@JsonProperty("optionType")
	@GraphQLScalar(fieldName = "optionType", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setOptionType(String optionType);

	@JsonProperty("optionType")
	@GraphQLScalar(fieldName = "optionType", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getOptionType();

	@JsonProperty("price")
	@GraphQLNonScalar(fieldName = "price", graphQLTypeSimpleName = "Price", javaClass = Price.class)
	public void setPrice(Price price);

	@JsonProperty("price")
	@GraphQLNonScalar(fieldName = "price", graphQLTypeSimpleName = "Price", javaClass = Price.class)
	public Price getPrice();

	@JsonProperty("selectedByCustomer")
	@GraphQLScalar(fieldName = "selectedByCustomer", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public void setSelectedByCustomer(Boolean selectedByCustomer);

	@JsonProperty("selectedByCustomer")
	@GraphQLScalar(fieldName = "selectedByCustomer", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public Boolean getSelectedByCustomer();

	@JsonProperty("sortIndex")
	@GraphQLScalar(fieldName = "sortIndex", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	public void setSortIndex(Integer sortIndex);

	@JsonProperty("sortIndex")
	@GraphQLScalar(fieldName = "sortIndex", graphQLTypeSimpleName = "Int", javaClass = Integer.class)
	public Integer getSortIndex();

	@JsonProperty("tags")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipmentTag.class)
	@GraphQLNonScalar(fieldName = "tags", graphQLTypeSimpleName = "EquipmentTag", javaClass = EquipmentTag.class)
	public void setTags(List<EquipmentTag> tags);

	@JsonProperty("tags")
	@JsonDeserialize(using = CustomJacksonDeserializers.ListEquipmentTag.class)
	@GraphQLNonScalar(fieldName = "tags", graphQLTypeSimpleName = "EquipmentTag", javaClass = EquipmentTag.class)
	public List<EquipmentTag> getTags();

	@JsonProperty("visibleForCustomers")
	@GraphQLScalar(fieldName = "visibleForCustomers", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public void setVisibleForCustomers(Boolean visibleForCustomers);

	@JsonProperty("visibleForCustomers")
	@GraphQLScalar(fieldName = "visibleForCustomers", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public Boolean getVisibleForCustomers();

	@JsonProperty("category")
	@GraphQLNonScalar(fieldName = "category", graphQLTypeSimpleName = "EquipmentCategoryDetails", javaClass = EquipmentCategoryDetails.class)
	public void setCategory(EquipmentCategoryDetails category);

	@JsonProperty("category")
	@GraphQLNonScalar(fieldName = "category", graphQLTypeSimpleName = "EquipmentCategoryDetails", javaClass = EquipmentCategoryDetails.class)
	public EquipmentCategoryDetails getCategory();

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void set__typename(String __typename);

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String get__typename();

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue);

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias);

}
