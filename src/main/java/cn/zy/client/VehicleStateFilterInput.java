/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("VehicleStateFilterInput")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class VehicleStateFilterInput 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public VehicleStateFilterInput(){
		// No action
	}

	@JsonProperty("customExteriorColor")
	@GraphQLNonScalar(fieldName = "customExteriorColor", graphQLTypeSimpleName = "CustomColorFilterInput", javaClass = CustomColorFilterInput.class)
	CustomColorFilterInput customExteriorColor;


	@JsonProperty("customInteriorColor")
	@GraphQLNonScalar(fieldName = "customInteriorColor", graphQLTypeSimpleName = "CustomColorFilterInput", javaClass = CustomColorFilterInput.class)
	CustomColorFilterInput customInteriorColor;


	@JsonProperty("exteriorColor")
	@GraphQLNonScalar(fieldName = "exteriorColor", graphQLTypeSimpleName = "OptionFilterInput", javaClass = OptionFilterInput.class)
	OptionFilterInput exteriorColor;


	@JsonProperty("interior")
	@GraphQLNonScalar(fieldName = "interior", graphQLTypeSimpleName = "OptionFilterInput", javaClass = OptionFilterInput.class)
	OptionFilterInput interior;


	@JsonProperty("roofColor")
	@GraphQLNonScalar(fieldName = "roofColor", graphQLTypeSimpleName = "OptionFilterInput", javaClass = OptionFilterInput.class)
	OptionFilterInput roofColor;



	public void setCustomExteriorColor(CustomColorFilterInput customExteriorColor) {
		this.customExteriorColor = customExteriorColor;
	}

	public CustomColorFilterInput getCustomExteriorColor() {
		return customExteriorColor;
	}
		

	public void setCustomInteriorColor(CustomColorFilterInput customInteriorColor) {
		this.customInteriorColor = customInteriorColor;
	}

	public CustomColorFilterInput getCustomInteriorColor() {
		return customInteriorColor;
	}
		

	public void setExteriorColor(OptionFilterInput exteriorColor) {
		this.exteriorColor = exteriorColor;
	}

	public OptionFilterInput getExteriorColor() {
		return exteriorColor;
	}
		

	public void setInterior(OptionFilterInput interior) {
		this.interior = interior;
	}

	public OptionFilterInput getInterior() {
		return interior;
	}
		

	public void setRoofColor(OptionFilterInput roofColor) {
		this.roofColor = roofColor;
	}

	public OptionFilterInput getRoofColor() {
		return roofColor;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "VehicleStateFilterInput {"
				+ "customExteriorColor: " + customExteriorColor
				+ ", "
				+ "customInteriorColor: " + customInteriorColor
				+ ", "
				+ "exteriorColor: " + exteriorColor
				+ ", "
				+ "interior: " + interior
				+ ", "
				+ "roofColor: " + roofColor
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private CustomColorFilterInput customExteriorColor;
		private CustomColorFilterInput customInteriorColor;
		private OptionFilterInput exteriorColor;
		private OptionFilterInput interior;
		private OptionFilterInput roofColor;

		public Builder withCustomExteriorColor(CustomColorFilterInput customExteriorColor) {
			this.customExteriorColor = customExteriorColor;
			return this;
		}
		public Builder withCustomInteriorColor(CustomColorFilterInput customInteriorColor) {
			this.customInteriorColor = customInteriorColor;
			return this;
		}
		public Builder withExteriorColor(OptionFilterInput exteriorColor) {
			this.exteriorColor = exteriorColor;
			return this;
		}
		public Builder withInterior(OptionFilterInput interior) {
			this.interior = interior;
			return this;
		}
		public Builder withRoofColor(OptionFilterInput roofColor) {
			this.roofColor = roofColor;
			return this;
		}

		public VehicleStateFilterInput build() {
			VehicleStateFilterInput _object = new VehicleStateFilterInput();
			_object.setCustomExteriorColor(customExteriorColor);
			_object.setCustomInteriorColor(customInteriorColor);
			_object.setExteriorColor(exteriorColor);
			_object.setInterior(interior);
			_object.setRoofColor(roofColor);
			return _object;
		}
	}
}
