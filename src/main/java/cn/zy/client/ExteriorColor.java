/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonSubTypes.Type;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;
import com.graphql_java_generator.annotation.GraphQLInterfaceType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@JsonTypeInfo(use = Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "__typename", visible = true)
@JsonSubTypes({ @Type(value = FactoryVehicleExteriorColor.class, name = "FactoryVehicleExteriorColor"), @Type(value = VehicleStateExteriorColor.class, name = "VehicleStateExteriorColor") })
@GraphQLInterfaceType("ExteriorColor")
@SuppressWarnings("unused")
public interface ExteriorColor  {

	@JsonProperty("colorTag")
	@GraphQLNonScalar(fieldName = "colorTag", graphQLTypeSimpleName = "ColorTag", javaClass = ColorTag.class)
	public void setColorTag(ColorTag colorTag);

	@JsonProperty("colorTag")
	@GraphQLNonScalar(fieldName = "colorTag", graphQLTypeSimpleName = "ColorTag", javaClass = ColorTag.class)
	public ColorTag getColorTag();

	@JsonProperty("customColorCode")
	@GraphQLScalar(fieldName = "customColorCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setCustomColorCode(String customColorCode);

	@JsonProperty("customColorCode")
	@GraphQLScalar(fieldName = "customColorCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getCustomColorCode();

	@JsonProperty("exteriorColorType")
	@GraphQLNonScalar(fieldName = "exteriorColorType", graphQLTypeSimpleName = "TranslatedEnumValue", javaClass = TranslatedEnumValue.class)
	public void setExteriorColorType(TranslatedEnumValue exteriorColorType);

	@JsonProperty("exteriorColorType")
	@GraphQLNonScalar(fieldName = "exteriorColorType", graphQLTypeSimpleName = "TranslatedEnumValue", javaClass = TranslatedEnumValue.class)
	public TranslatedEnumValue getExteriorColorType();

	@JsonProperty("hexCode")
	@GraphQLScalar(fieldName = "hexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setHexCode(String hexCode);

	@JsonProperty("hexCode")
	@GraphQLScalar(fieldName = "hexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getHexCode();

	@JsonProperty("isCustomColor")
	@GraphQLScalar(fieldName = "isCustomColor", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public void setIsCustomColor(Boolean isCustomColor);

	@JsonProperty("isCustomColor")
	@GraphQLScalar(fieldName = "isCustomColor", graphQLTypeSimpleName = "Boolean", javaClass = Boolean.class)
	public Boolean getIsCustomColor();

	@JsonProperty("name")
	@GraphQLNonScalar(fieldName = "name", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public void setName(TranslatedText name);

	@JsonProperty("name")
	@GraphQLNonScalar(fieldName = "name", graphQLTypeSimpleName = "TranslatedText", javaClass = TranslatedText.class)
	public TranslatedText getName();

	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setOptionCode(String optionCode);

	@JsonProperty("optionCode")
	@GraphQLScalar(fieldName = "optionCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getOptionCode();

	@JsonProperty("optionType")
	@GraphQLScalar(fieldName = "optionType", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void setOptionType(String optionType);

	@JsonProperty("optionType")
	@GraphQLScalar(fieldName = "optionType", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String getOptionType();

	@JsonProperty("price")
	@GraphQLNonScalar(fieldName = "price", graphQLTypeSimpleName = "Price", javaClass = Price.class)
	public void setPrice(Price price);

	@JsonProperty("price")
	@GraphQLNonScalar(fieldName = "price", graphQLTypeSimpleName = "Price", javaClass = Price.class)
	public Price getPrice();

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public void set__typename(String __typename);

	@JsonProperty("__typename")
	@GraphQLScalar(fieldName = "__typename", graphQLTypeSimpleName = "String", javaClass = String.class)
	public String get__typename();

	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue);

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias);

}
