/** Generated by the default template from graphql-java-generator */
package cn.zy.client;

import java.util.HashMap;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.graphql_java_generator.annotation.GraphQLInputType;
import com.graphql_java_generator.annotation.GraphQLNonScalar;
import com.graphql_java_generator.annotation.GraphQLScalar;

/**
 *
 * @author generated by graphql-java-generator
 * @see <a href="https://github.com/graphql-java-generator/graphql-java-generator">https://github.com/graphql-java-generator/graphql-java-generator</a>
 */
@GraphQLInputType("ManualInteriorModificationInput")
@JsonInclude(Include.NON_NULL)
@SuppressWarnings("unused")
public class ManualInteriorModificationInput 
{

	/**
	 * This map contains the deserialized values for the alias, as parsed from the json response from the GraphQL
	 * server. The key is the alias name, the value is the deserialiazed value (taking into account custom scalars,
	 * lists, ...)
	 */
	@com.graphql_java_generator.annotation.GraphQLIgnore
	Map<String, Object> aliasValues = new HashMap<>();

	public ManualInteriorModificationInput(){
		// No action
	}

	@JsonProperty("cockpitColorHexCode")
	@GraphQLScalar(fieldName = "cockpitColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String cockpitColorHexCode;


	@JsonProperty("cockpitStitchingColorHexCode")
	@GraphQLScalar(fieldName = "cockpitStitchingColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String cockpitStitchingColorHexCode;


	@JsonProperty("colorTagKey")
	@GraphQLScalar(fieldName = "colorTagKey", graphQLTypeSimpleName = "String", javaClass = String.class)
	String colorTagKey;


	@JsonProperty("material")
	@GraphQLScalar(fieldName = "material", graphQLTypeSimpleName = "InteriorMaterial", javaClass = InteriorMaterial.class)
	InteriorMaterial material;


	@JsonProperty("name")
	@GraphQLNonScalar(fieldName = "name", graphQLTypeSimpleName = "TranslatedTextInput", javaClass = TranslatedTextInput.class)
	TranslatedTextInput name;


	@JsonProperty("seatColorHexCode")
	@GraphQLScalar(fieldName = "seatColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String seatColorHexCode;


	@JsonProperty("seatStitchingColorHexCode")
	@GraphQLScalar(fieldName = "seatStitchingColorHexCode", graphQLTypeSimpleName = "String", javaClass = String.class)
	String seatStitchingColorHexCode;



	public void setCockpitColorHexCode(String cockpitColorHexCode) {
		this.cockpitColorHexCode = cockpitColorHexCode;
	}

	public String getCockpitColorHexCode() {
		return cockpitColorHexCode;
	}
		

	public void setCockpitStitchingColorHexCode(String cockpitStitchingColorHexCode) {
		this.cockpitStitchingColorHexCode = cockpitStitchingColorHexCode;
	}

	public String getCockpitStitchingColorHexCode() {
		return cockpitStitchingColorHexCode;
	}
		

	public void setColorTagKey(String colorTagKey) {
		this.colorTagKey = colorTagKey;
	}

	public String getColorTagKey() {
		return colorTagKey;
	}
		

	public void setMaterial(InteriorMaterial material) {
		this.material = material;
	}

	public InteriorMaterial getMaterial() {
		return material;
	}
		

	public void setName(TranslatedTextInput name) {
		this.name = name;
	}

	public TranslatedTextInput getName() {
		return name;
	}
		

	public void setSeatColorHexCode(String seatColorHexCode) {
		this.seatColorHexCode = seatColorHexCode;
	}

	public String getSeatColorHexCode() {
		return seatColorHexCode;
	}
		

	public void setSeatStitchingColorHexCode(String seatStitchingColorHexCode) {
		this.seatStitchingColorHexCode = seatStitchingColorHexCode;
	}

	public String getSeatStitchingColorHexCode() {
		return seatStitchingColorHexCode;
	}
		

 
	/**
	 * This method is called during the json deserialization process, by the {@link GraphQLObjectMapper}, each time an
	 * alias value is read from the json.
	 * 
	 * @param aliasName
	 * @param aliasDeserializedValue
	 */
	public void setAliasValue(String aliasName, Object aliasDeserializedValue) {
		aliasValues.put(aliasName, aliasDeserializedValue);
	}

	/**
	 * Retrieves the value for the given alias, as it has been received for this object in the GraphQL response. <BR/>
	 * This method <B>should not be used for Custom Scalars</B>, as the parser doesn't know if this alias is a custom
	 * scalar, and which custom scalar to use at deserialization time. In most case, a value will then be provided by
	 * this method with a basis json deserialization, but this value won't be the proper custom scalar value.
	 * 
	 * @param alias
	 * @return
	 */
	public Object getAliasValue(String alias) {
		return aliasValues.get(alias);
	}

    public String toString() {
        return "ManualInteriorModificationInput {"
				+ "cockpitColorHexCode: " + cockpitColorHexCode
				+ ", "
				+ "cockpitStitchingColorHexCode: " + cockpitStitchingColorHexCode
				+ ", "
				+ "colorTagKey: " + colorTagKey
				+ ", "
				+ "material: " + material
				+ ", "
				+ "name: " + name
				+ ", "
				+ "seatColorHexCode: " + seatColorHexCode
				+ ", "
				+ "seatStitchingColorHexCode: " + seatStitchingColorHexCode
        		+ "}";
    }

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * The Builder that helps building instance of this POJO. You can get an instance of this class, by calling the
	 * {@link #builder()}
	 */
	public static class Builder {
		private String cockpitColorHexCode;
		private String cockpitStitchingColorHexCode;
		private String colorTagKey;
		private InteriorMaterial material;
		private TranslatedTextInput name;
		private String seatColorHexCode;
		private String seatStitchingColorHexCode;

		public Builder withCockpitColorHexCode(String cockpitColorHexCode) {
			this.cockpitColorHexCode = cockpitColorHexCode;
			return this;
		}
		public Builder withCockpitStitchingColorHexCode(String cockpitStitchingColorHexCode) {
			this.cockpitStitchingColorHexCode = cockpitStitchingColorHexCode;
			return this;
		}
		public Builder withColorTagKey(String colorTagKey) {
			this.colorTagKey = colorTagKey;
			return this;
		}
		public Builder withMaterial(InteriorMaterial material) {
			this.material = material;
			return this;
		}
		public Builder withName(TranslatedTextInput name) {
			this.name = name;
			return this;
		}
		public Builder withSeatColorHexCode(String seatColorHexCode) {
			this.seatColorHexCode = seatColorHexCode;
			return this;
		}
		public Builder withSeatStitchingColorHexCode(String seatStitchingColorHexCode) {
			this.seatStitchingColorHexCode = seatStitchingColorHexCode;
			return this;
		}

		public ManualInteriorModificationInput build() {
			ManualInteriorModificationInput _object = new ManualInteriorModificationInput();
			_object.setCockpitColorHexCode(cockpitColorHexCode);
			_object.setCockpitStitchingColorHexCode(cockpitStitchingColorHexCode);
			_object.setColorTagKey(colorTagKey);
			_object.setMaterial(material);
			_object.setName(name);
			_object.setSeatColorHexCode(seatColorHexCode);
			_object.setSeatStitchingColorHexCode(seatStitchingColorHexCode);
			return _object;
		}
	}
}
